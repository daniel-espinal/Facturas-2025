using DevExpress.Xpo.DB.Helpers;
using DevExpress.XtraGrid.Views.Base;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Sql;
using DevExpress.XtraSplashScreen;
using DevExpress.Data.Filtering;
using System.Windows.Forms;
using FacturacionGobierno.S390DataSetTableAdapters;
using FacturacionGobierno.Properties;
using FacturacionGobierno.Model;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using DevExpress.XtraEditors.Controls;
using System.Linq;
using System.Text;
using DevExpress.Pdf;
using System.Data.OleDb;

using System.Drawing;
using DevExpress.XtraReports.UI;

namespace FacturacionGobierno
{
    public partial class FrmFacturacion : DevExpress.XtraBars.Ribbon.RibbonForm
    {

        List<CodigosAgrupacion> lstAgrupacion = new List<CodigosAgrupacion>();
        public FrmFacturacion()
        {
            InitializeComponent();
            Conexion conexion = new Conexion();
            string vQuerySector = "[dbo].[EEHAviso_Masivo_General] 1";
            DataTable vDatosSectores = conexion.obtenerDataTable(vQuerySector);
            if (vDatosSectores.Rows.Count > 0)
            {
                for (int i = 0; i < vDatosSectores.Rows.Count; i++)
                {
                    cbnSector.Properties.Items.Add((vDatosSectores.Rows[i]["cod_sector"].ToString() + " - " + vDatosSectores.Rows[i]["nombreSector"]));

                }
            }


            conexion.Close();
            // This line of code is generated by Data Source Configuration Wizard
            // This line of code is generated by Data Source Configuration Wizard
            //vistasaldosTableAdapter1.Fill(inventariosDataSet1.vistasaldos);
            // This line of code is generated by Data Source Configuration Wizard
            //avisos_gobiernoTableAdapter1.Fill(s390DataSet1.Avisos_gobierno);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
          /*  string select = String.Format("SELECT dbo.ultima_fecha()");
            SqlConnection Conexion = new SqlConnection(Settings.Default.MAESTROConnectionString);
            SqlCommand Comando = new SqlCommand(select, Conexion);
            if (Conexion.State == 0) Conexion.Open();
            DateTime UltimaFecha = Convert.ToDateTime(Comando.ExecuteScalar());
            lastupdate.Text = UltimaFecha.ToString();*/
            SplashScreenManager.CloseForm();
        }
        

        private void gridView3_CustomUnboundColumnData(object sender, DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs e)
        {
            GridView view = sender as GridView;
            if (e.Column.Name == "descripcion" && e.IsGetData)
            {
                DataRowView Fila = (DataRowView)e.Row;
            }

        }


        private string UsuarioSistema;
        public string Usuario
        {
            get { return UsuarioSistema; }
            set { UsuarioSistema = value; }
        }

        private Facturacion obtenerFacturacion(decimal contador)
        {
            Facturacion facturacion = new Facturacion();

            AvisoGobierno avisoGobierno = new AvisoGobierno();         
            CodigosAgrupacion codigosAgrupacion = new CodigosAgrupacion();

            facturacion.LstAvisoGobierno = avisoGobierno.ObtenerListaAvisoGobierno(contador);          
            facturacion.LstCodigoAgrupacion = codigosAgrupacion.ObtenerCodigosAgrupacion();

            return facturacion;
        }

        public string generarMesFacturacion(int value)
        {

            string ultimoMesFacturacion = DateTime.Today.Year.ToString();
            ultimoMesFacturacion = ultimoMesFacturacion.Remove(0, 2);
            ultimoMesFacturacion += (DateTime.Today.Month - (value)).ToString().PadLeft(2, '0');
            return ultimoMesFacturacion;
        }

        private void barButtonItem13_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
         { 
            SplashScreenManager.ShowForm(typeof(WaitForm1));

            /* 
             * Rango:  
             *  Especifíca si una institucion tiene mas de 1000 facturas, 
             *  por lo que los agrupa segun el maximo(1000), en caso por ejemplo
             *  de tener 6000 claves, se dividen en 6 rangos 
            */
          int contador = 1;
          int maximo = 1000;
          int rango = 0;
          string vPeriodo = generarMesFacturacionNew(0);
          FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
        // facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo("MASIVA", 0);
         facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(Util.Util.TIPO_FACTURA_MASIVA, 0, 0);
         Facturacion facturacion = obtenerFacturacion(facturaCorrelativo.ContadorInicial);
         List<AvisoGobierno> lstAvisoGobierno = facturacion.LstAvisoGobierno;
         CodigosAgrupacion codigosAgrupacion = new CodigosAgrupacion();
         lstAgrupacion = codigosAgrupacion.ObtenerFacturaAgrupacion();

            /* 
            * ContadorFacturasDetalle:
            *   Correlativo de la factura siguiente, el cual se envia 
            *   como parametro a SP Aviso_Gobierno 
            */
          decimal periodFacturacion = facturaCorrelativo.Periodo;
          periodFacturacion = Convert.ToDecimal(generarMesFacturacion(1));
          int contadorFacturasDetalle = Convert.ToInt32(facturaCorrelativo.ContadorInicial);

         List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();


          string targetPath = @"C:\\facturas\\GOBIERNO\\" + vPeriodo + "\\";
          if (!System.IO.Directory.Exists(targetPath))
               System.IO.Directory.CreateDirectory(targetPath);


          string mensual = @"\\192.168.100.59\\e\\ArchivosAdjuntos\\GOBIERNO\\" + vPeriodo + "\\";
          if (!System.IO.Directory.Exists(mensual))
                System.IO.Directory.CreateDirectory(mensual);
           try
            {
             for (int i = 0; i<lstAvisoGobierno.Count; i++)
              {  
               lstAvisoGobiernoDetalle.Add(lstAvisoGobierno[i]);

               if (!(i+1 == lstAvisoGobierno.Count )) {
                if (lstAvisoGobierno[i].Codigo_agrupa == lstAvisoGobierno[i + 1].Codigo_agrupa){
                   if (contador == maximo)  {       
                  string path = mensual + lstAvisoGobierno[i].Prefijo + " - " + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + "_RANGO_" + rango + ".pdf";
                  string pathnv = targetPath + lstAvisoGobierno[i].Prefijo + " - " + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + "_RANGO_" + rango + ".pdf";
                         generarFactura(maximo, rango, contadorFacturasDetalle, periodFacturacion, lstAvisoGobierno[i].Prefijo, path, pathnv, facturaCorrelativo.Generardetalle, lstAvisoGobiernoDetalle, periodFacturacion);
                         contadorFacturasDetalle += contador ;
                         rango++;
                         contador = 0;
                         lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                   }
                  contador++;
                  }
                else
                   {
                       string path = "";
                       string pathnv = ""; 

                if (rango > 0) {
                    path = mensual + lstAvisoGobierno[i].Prefijo + "_" + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + "_RANGO_" + rango + ".pdf";
                    pathnv = targetPath + lstAvisoGobierno[i].Prefijo + "_" + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + "_RANGO_" + rango + ".pdf";
                  }
                  else {
                   path = mensual + lstAvisoGobierno[i].Prefijo + "_" + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + ".pdf";
                   pathnv = targetPath + lstAvisoGobierno[i].Prefijo + "_" + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + ".pdf";
                   }          
                   generarFactura(maximo, rango, contadorFacturasDetalle, periodFacturacion, lstAvisoGobierno[i].Prefijo, path, pathnv, facturaCorrelativo.Generardetalle, lstAvisoGobiernoDetalle, periodFacturacion);
                   contadorFacturasDetalle += contador;
                   lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                   contador = 1;
                   rango = 0;                       
                   }  
               }
                else
                {
                   string path = "C:\\facturas\\" + lstAvisoGobierno[i].Prefijo + " - " + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + ".pdf";
                   string pathnv = targetPath + lstAvisoGobierno[i].Prefijo + " - " + ObtenerInstitucion(lstAvisoGobierno[i].Codigo_agrupa) + ".pdf";
                          generarFactura(maximo, rango, contadorFacturasDetalle, periodFacturacion, lstAvisoGobierno[i].Prefijo, path, pathnv, facturaCorrelativo.Generardetalle, lstAvisoGobiernoDetalle, periodFacturacion);
                          contadorFacturasDetalle += contador;
                         lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                          contador = 1;
                         rango = 0;
                    }                   
                }        
                //Si guardar detalle = falso indica que ya se generó una factura en ese mes y no actualiza valores.
                if (facturaCorrelativo.Generardetalle)
                {
                    facturaCorrelativo.actualizarPeriodo(contadorFacturasDetalle, Convert.ToDecimal(facturaCorrelativo.generarMesFacturacion(1)), Util.Util.TIPO_FACTURA_MASIVA);
                    facturaCorrelativo.actualiarPeriodoAnterior(Convert.ToDecimal(facturaCorrelativo.generarMesFacturacion(2)), Util.Util.TIPO_FACTURA_MASIVA);
                }     
            }
            catch (Exception ex)
            {
                try
                {
                    Console.WriteLine("Exception: " + ex.Message);
                    StreamWriter sw = new StreamWriter("C:\\facturas\\LOG.txt");
sw.WriteLine(DateTime.Today +" - "+ ex.Message);
                    sw.Close();
                }
                catch (Exception es)
                {
                    Console.WriteLine("Exception: " + es.Message);
                }              

            }
        

            SplashScreenManager.CloseForm();

        
        }

        private int generarFactura( int maximo, int rango, int contadorFacturasDetalle, decimal periodoFacturacion,
                                    string Prefijo, string path, string pathnv ,Boolean generar_detalle,
                                    List<AvisoGobierno> lstAvisoGobiernoDetalle, decimal periodFacturacion)
        {
            int insertados = 0;
            try
            {
                //FacturaEEH Facturas = new FacturaEEH();
             FacturaEEH Facturas = new FacturaEEH();
             FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
             Facturas.Parameters["pagina"].Value = (maximo * rango) + 1;
             Facturas.Parameters["maximo"].Value = maximo * (rango + 1);
             Facturas.Parameters["contador_factura"].Value = contadorFacturasDetalle;
             Facturas.Parameters["mes_facturacion"].Value = periodoFacturacion;
             Facturas.Parameters["codigoAgrupa"].Value = Prefijo;
             Facturas.Parameters["exclusiones"].Value = "0";
             Facturas.CreateDocument();
             Facturas.ExportToPdf(path);
             Facturas.ExportToPdf(pathnv);
             Facturas.Dispose();
             insertados = facturaCorrelativo.insertarDetalleCorrelativo(lstAvisoGobiernoDetalle, contadorFacturasDetalle, periodFacturacion, Util.Util.TIPO_FACTURA_MASIVA);
            }
            catch (Exception ex)
            {                
                StreamWriter sw = new StreamWriter("C:\\facturas\\LOG_FACTURACION.txt");
                sw.WriteLine(DateTime.Today + " - " + Prefijo + " " + ex.Message);
                sw.Close();
            }
          
            return insertados;
        }

        private string ObtenerInstitucion(string codigo)//, List<CodigosAgrupacion> listaAgrupacion)
        {
            string institucion = ToString().Trim();
            institucion = institucion.Replace('/', ' ');
            institucion = institucion.Replace('|', ' ');
            institucion = institucion.Replace('"', ' ');
            institucion = institucion.Replace('\'', ' ');
            institucion = institucion.Replace(':', ' ');

            

            foreach (CodigosAgrupacion ca in lstAgrupacion)//listaAgrupacion)
            {
                if(ca.Codigo == Convert.ToDouble(codigo))
                {
                    institucion = ca.Descripcion;
                }
            }





            return institucion;
        }

        private FacturaTEST MGeneraReporte(Facturacion facturacion)
        {               
         
            FacturaTEST reporte = new FacturaTEST();
            try
            {
                DataSet dsReporte = new DataSet();

                List<CargosVarios> lstCargorVariosTemp = new List<CargosVarios>();
                List<HistoricoConsumo> lstHistoricoTemp = new List<HistoricoConsumo>();
                foreach (AvisoGobierno avisoGobierno in facturacion.LstAvisoGobierno)
                {
                    foreach (CargosVarios cargosvarios in facturacion.LstCargosVarios)
                    {
                        if(avisoGobierno.Clave_primaria == cargosvarios.Hc_clave_abonado)
                        {
                            lstCargorVariosTemp.Add(cargosvarios);
                        }
                    }

                    foreach(HistoricoConsumo hc in facturacion.LstHistoricoConsumo)
                    {
                        if(avisoGobierno.Clave_primaria == hc.Clave_primaria)
                        {
                            lstHistoricoTemp.Add(hc);
                        }
                    }
                }

                DataTable dataTableAvisoGobierno = MToDataSet(facturacion.LstAvisoGobierno, "Aviso_Gobierno");
                DataTable dataTableHistoricoConsumo = MToDataSet(lstHistoricoTemp, "Historico_Consumo");
                DataTable dataTableCargosVarios = MToDataSet(lstCargorVariosTemp, "Cargos_Varios");
                DataTable dataTableReactiva = MToDataSet(facturacion.LstReactiva, "Reactiva");



                dsReporte.Tables.Add(dataTableAvisoGobierno);
                dsReporte.Tables.Add(dataTableHistoricoConsumo);
                dsReporte.Tables.Add(dataTableCargosVarios);
                dsReporte.Tables.Add(dataTableReactiva);

                dsReporte.Relations.Add("Aviso_Gobierno.Aviso_GobiernoCargos_Varios",
                                        dataTableAvisoGobierno.Columns["Clave_primaria"],
                                        dataTableCargosVarios.Columns["Hc_clave_abonado"]);

                dsReporte.Relations.Add("Aviso_Gobierno.Aviso_GobiernoHistorico_Consumo",
                                        dataTableAvisoGobierno.Columns["Clave_primaria"],
                                       dataTableHistoricoConsumo.Columns["Clave_primaria"]);
               // dsReporte.Tables["Historico_Consumo"].Columns["Clave_primaria"]);
                

                reporte.DataSource = dsReporte;
               
              //  dsReporte.WriteXmlSchema(@"D:\Reporte6.xsd");           
                return reporte;
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw new Exception(ex.Message);
            }

         
        }

        public DataTable MToDataSet<T>(IList<T> list, string tableName)
        {
            Type elementType = typeof(T);        
            DataTable t = new DataTable(tableName);           

            //add a column to table for each public property on T
            foreach (var propInfo in elementType.GetProperties())
            {
                Type ColType = Nullable.GetUnderlyingType(propInfo.PropertyType) ?? propInfo.PropertyType;

                t.Columns.Add(propInfo.Name, ColType);
            }

            //go through each property on T and add each value to the table
            foreach (T item in list)
            {
                DataRow row = t.NewRow();

                foreach (var propInfo in elementType.GetProperties())
                {
                    row[propInfo.Name] = propInfo.GetValue(item, null) ?? DBNull.Value;
                }

                t.Rows.Add(row);
            }

            return t;
        }

        private void barButtonItem15_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SplashScreenManager.ShowForm(typeof(WaitForm1));
            string vPeriodo = generarMesFacturacionNew(0);
            // FacturaAgrupacion Facturas3 = new FacturaAgrupacion();

            CodigosAgrupacion codigoAgrupacion = new CodigosAgrupacion();

            string targetPath = @"\\192.168.100.59\\e\\ArchivosAdjuntos\\GOBIERNOESTADO\\" + vPeriodo + "\\";
            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);


            string mensual = @"C:\\facturas\\EstadoCuenta\\" + vPeriodo + "\\";
            if (!System.IO.Directory.Exists(mensual))
                System.IO.Directory.CreateDirectory(mensual);

            try
            {
                FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                string vMesfacturacion = facturaCorrelativo.generarMesFacturacion(1);
                foreach (CodigosAgrupacion codAgru in codigoAgrupacion.ObtenerFacturaAgrupacion())
                {

                    FacturaAgrupacionHorizontal Facturas3 = new FacturaAgrupacionHorizontal();
                    //FacturaAgrupacion Facturas3 = new FacturaAgrupacion();


                    string codigoAgrupa = codAgru.Codigo.ToString().PadLeft(4, '0');
                    Facturas3.Parameters["mes_facturacion"].Value = vMesfacturacion;
                    Facturas3.Parameters["codigoAgrupa"].Value = codigoAgrupa;

                    Facturas3.CreateDocument();
                    string path = mensual + codigoAgrupa + "_" + codAgru.Descripcion + " ESTADO_CUENTA" + ".pdf";
                    string pathnv = targetPath + codigoAgrupa + "_" + codAgru.Descripcion + " ESTADO_CUENTA" + ".pdf";
                    Facturas3.ExportToPdf(path);
                    Facturas3.ExportToPdf(pathnv);
                    Facturas3.Dispose();

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception: " + ex.Message);
                StreamWriter sw = new StreamWriter("C:\\facturas\\LOG_CODIGO_AGRUPACION.txt");
                sw.WriteLine(DateTime.Today + " - " + ex.Message);
                sw.Close();
            }
            SplashScreenManager.CloseForm();
        }

   
        private void barButtonItem17_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SplashScreenManager.ShowForm(typeof(WaitForm1));

                FacturaCorreo Facturas = new FacturaCorreo();
                //ContenedorReportes Reporte2 = new ContenedorReportes();
                //Reporte2.VisorDoc.DocumentSource = Facturas;
                //Reporte2.Show();
                Facturas.ExportToPdf("C:\\facturas\\FACTURA_ESPECIAL_CORREO\\Correo1804.pdf");
                Facturas.Dispose();

            SplashScreenManager.CloseForm();
        }

        private void barButtonItem18_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SplashScreenManager.ShowForm(typeof(WaitForm1));

            FactuEspecialesUnit Facturas = new FactuEspecialesUnit();
            //ContenedorReportes Reporte2 = new ContenedorReportes();
            //Reporte2.VisorDoc.DocumentSource = Facturas;
            //Reporte2.Show();
            Facturas.ExportToPdf("C:\\facturas\\Especiales.pdf");
            Facturas.Dispose();

            SplashScreenManager.CloseForm();
        }

        private void barButtonItem19_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            SplashScreenManager.ShowForm(typeof(WaitForm1));

            FacturaAgrupacionEspeciales Facturas3 = new FacturaAgrupacionEspeciales();

            Facturas3.CreateDocument();

            ContenedorReportes Reporte3 = new ContenedorReportes();
            Reporte3.VisorDoc.DocumentSource = Facturas3;
            Reporte3.Show();

            SplashScreenManager.CloseForm();
        }

        //private void btnFacturaMesActual_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        //{
        //    //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
        //    string var = desgrupo.Text.Trim();
        //    if (var != string.Empty) 
        //    {
        //        FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
        //        string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
        //        string vQuery = "[EEHAviso_Gobierno_Generales] 2," + var;
        //        Conexion vConexion = new Conexion();
        //        DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);
        //        if (vDatosMesActual.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
        //            {

        //                List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
        //                int clave = Convert.ToInt32(var);
        //                string tipoFactura = "FAC_ESP_" + clave + "_" + periodoFacturacion;

        //                string prefijo = vDatosMesActual.Rows[i]["cod_agrup"].ToString();
        //                facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, clave, 0);
        //                decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
        //                AvisoGobierno agob = new AvisoGobierno();

        //                try
        //                {
        //                    FacEspecialMesActual FacturaEspecial = new FacEspecialMesActual();
        //                    FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
        //                    FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
        //                    FacturaEspecial.Parameters["clave"].Value = clave;
        //                    FacturaEspecial.Parameters["contador_factura"].Value = contadorFacturas; //enviar la siguiente
        //                    FacturaEspecial.CreateDocument();
        //                    FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_MES_ACTUAL\\" + prefijo + " - " + clave + "_" + periodoFacturacion + ".pdf");
        //                    FacturaEspecial.Dispose();
        //                    agob.Clave_primaria = clave;
        //                    agob.Prefijo = prefijo;
        //                    lstAvisoGobiernoDetalle.Add(agob);

        //                    facturaCorrelativo.insertarDetalleCorrelativo(lstAvisoGobiernoDetalle, Convert.ToInt32(contadorFacturas - 1), Convert.ToDecimal(periodoFacturacion), tipoFactura);

        //                    if (facturaCorrelativo.Generardetalle)
        //                    {
        //                        facturaCorrelativo.actualizarPeriodo(contadorFacturas, Convert.ToDecimal(periodoFacturacion), tipoFactura);

        //                    }
        //                }
        //                catch (Exception Ex)
        //                {

        //                    Console.WriteLine(Ex.Message);
        //                }
        //            }
        //        }
        //        else
        //        {
        //            facturaCorrelativo = new FacturaCorrelativo();
        //            periodoFacturacion = facturaCorrelativo.generarMesFacturacion(1);
        //            vQuery = "[EEHAviso_Gobierno_Generales] 1," + periodoFacturacion;
        //            DataTable   vDatosIrregularidades = vConexion.obtenerDataTable(vQuery);
        //            if (vDatosIrregularidades.Rows.Count > 0)
        //            {
        //                for (int i = 0; i < vDatosIrregularidades.Rows.Count; i++)
        //                {

        //                    List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
        //                    int clave = Convert.ToInt32(vDatosIrregularidades.Rows[i]["clave_primaria"].ToString());
        //                    string tipoFactura = "FAC_ESP_" + clave + "_" + periodoFacturacion;

        //                    string prefijo = vDatosIrregularidades.Rows[i]["cod_agrup"].ToString();
        //                    facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, clave, 0);
        //                    decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
        //                    AvisoGobierno agob = new AvisoGobierno();

        //                    try
        //                    {
        //                        FacEspecialMesActual FacturaEspecial = new FacEspecialMesActual();
        //                        FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
        //                        FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
        //                        FacturaEspecial.Parameters["clave"].Value = clave;
        //                        FacturaEspecial.Parameters["contador_factura"].Value = contadorFacturas; //enviar la siguiente
        //                        FacturaEspecial.CreateDocument();
        //                        FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_IRREGULAR\\" + prefijo + " - " + clave + "_" + periodoFacturacion + ".pdf");
        //                        FacturaEspecial.Dispose();
        //                        agob.Clave_primaria = clave;
        //                        agob.Prefijo = prefijo;
        //                        lstAvisoGobiernoDetalle.Add(agob);

        //                        facturaCorrelativo.insertarDetalleCorrelativo(lstAvisoGobiernoDetalle, Convert.ToInt32(contadorFacturas - 1), Convert.ToDecimal(periodoFacturacion), tipoFactura);

        //                        if (facturaCorrelativo.Generardetalle)
        //                        {
        //                            facturaCorrelativo.actualizarPeriodo(contadorFacturas, Convert.ToDecimal(periodoFacturacion), tipoFactura);

        //                        }
        //                    }
        //                    catch (Exception Ex)
        //                    {

        //                        Console.WriteLine(Ex.Message);
        //                    }
        //                }
        //            }

        //        }
        //    }

        

          
        //}

        private void btnAdicionarClave_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {            
            FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
            List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
            decimal clave = 1939584;
            string tipoFactura = "FAC_ESP_"+ clave;
            string prefijo = "313";
            string periodoFacturacion = facturaCorrelativo.generarMesFacturacionNew(1);
            facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, Convert.ToInt32(clave),1);
            decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
            AvisoGobierno agob = new AvisoGobierno();
          
            try
            {
                FacEspecialAdicionaClaves FacturaEspecial = new FacEspecialAdicionaClaves();
                FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
                FacturaEspecial.Parameters["clave"].Value = clave;
                FacturaEspecial.Parameters["contador_factura"].Value = contadorFacturas; //enviar la siguiente
                FacturaEspecial.CreateDocument();
                FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_ESPECIAL\\" + prefijo + " - "+ clave + ".pdf");
                FacturaEspecial.Dispose();
                agob.Clave_primaria = clave;
                agob.Prefijo = prefijo;
                lstAvisoGobiernoDetalle.Add(agob);

                facturaCorrelativo.insertarDetalleCorrelativo(lstAvisoGobiernoDetalle, Convert.ToInt32(contadorFacturas - 1), Convert.ToDecimal(periodoFacturacion), tipoFactura);
                facturaCorrelativo.actualizarPeriodo(contadorFacturas, Convert.ToDecimal(periodoFacturacion), tipoFactura);

            }
            catch (Exception)
            {

                throw;
            }

        }

        private void BtnReimpresion_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                String vQuery = "[EEHAviso_Gobierno_Reimpresion_General] 1";
                Conexion vConexion = new Conexion();
                DataTable vDatosReimpresion = vConexion.obtenerDataTable(vQuery);
                if (vDatosReimpresion.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosReimpresion.Rows.Count; i++)
                    {
                        string periodo = vDatosReimpresion.Rows[i]["PERIODO"].ToString();
                        string clave = "1126731";//vDatosReimpresion.Rows[i]["CLAVE"].ToString();
                        FacturaEEHReimpresion Facturas = new FacturaEEHReimpresion();
                        Facturas.Parameters["tipo"].Value = 1;
                        Facturas.Parameters["clave"].Value = clave;
                        Facturas.Parameters["contador_factura"].Value = vDatosReimpresion.Rows[i]["N_FACTURA"].ToString(); 
                        Facturas.Parameters["mes_facturacion"].Value = periodo;
                        Facturas.CreateDocument();
                        Facturas.ExportToPdf(@"C:\\facturas\\Reimpresion\\" + periodo + "_" + clave + ".pdf");
                        Facturas.Dispose();
                    }
                }
                
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        private void barBtnMesActualHCargo_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
            string var = "444332";// desgrupo.Text.Trim();
            FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
            List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
            string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
            decimal clave = Convert.ToDecimal(var);
            string tipoFactura = "FAC_ESP_" + clave + "_"+periodoFacturacion;

            string prefijo = "308";
            facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, Convert.ToInt32(clave), 0);
            decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
            AvisoGobierno agob = new AvisoGobierno();

            try
            {
                FacEspecialMesActualHCargo FacturaEspecial = new FacEspecialMesActualHCargo();
                FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
                FacturaEspecial.Parameters["clave"].Value = clave;
                FacturaEspecial.Parameters["contador_factura"].Value = contadorFacturas; //enviar la siguiente
                FacturaEspecial.CreateDocument();
                FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_ESPECIAL\\" + prefijo + " - " + clave + "_"+ periodoFacturacion + ".pdf");
                FacturaEspecial.Dispose();
                agob.Clave_primaria = clave;
                agob.Prefijo = prefijo;
                lstAvisoGobiernoDetalle.Add(agob);

                facturaCorrelativo.insertarDetalleCorrelativo(lstAvisoGobiernoDetalle, Convert.ToInt32(contadorFacturas - 1), Convert.ToDecimal(periodoFacturacion), tipoFactura);

                if (facturaCorrelativo.Generardetalle)
                {
                    facturaCorrelativo.actualizarPeriodo(contadorFacturas, Convert.ToDecimal(periodoFacturacion), tipoFactura);

                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        private static void GenerarFacturaAltosConsumidores2(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            Conexion vConexion = new Conexion();
            try
            {
                Object[] vObjectosFact = (Object[])vObjFact;
            
                FacturaEEHAltosConsumidores Facturas = new FacturaEEHAltosConsumidores();
                Facturas.Parameters["tipo"].Value = 2;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[1])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[1]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[2]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[3]);
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                
                Facturas.Dispose();
                String vQuerDetalleMasivo = "[EEHAltos_Consumidores_Generales] 17," + Convert.ToString(vObjectosFact[3]);
                vConexion.obtenerDataTable(vQuerDetalleMasivo);
                vErro = Convert.ToString(vObjectosFact[0]);

            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }


        private static void GenerarFacturaAltosConsumidores(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            Conexion vConexion = new Conexion();
            try
            {
                Object[] vObjectosFact = (Object[])vObjFact;

                FacturaEEHAltosConsumidores Facturas = new FacturaEEHAltosConsumidores();
                Facturas.Parameters["tipo"].Value = 1;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[1])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[1]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[2]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[3]);
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                
                Facturas.Dispose();
                String vQuerDetalleMasivo = "[EEHAltos_Consumidores_Generales] 17," + Convert.ToString(vObjectosFact[3]);
                vConexion.obtenerDataTable(vQuerDetalleMasivo);
                vErro = Convert.ToString(vObjectosFact[0]);
            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }

        private static void GenerarFacturaAltosConsumidoresD(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            try
            {
                Object[] vObjectosFact = (Object[])vObjFact;

                AltosMesActual Facturas = new AltosMesActual ();
                Facturas.Parameters["tipo"].Value = 1;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[2])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[2]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[3]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[4]);
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                Facturas.Dispose();
                vErro = Convert.ToString(vObjectosFact[0]);
            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }

        private static void GenerarFacturaAltosConsumidoresA(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            try
            {
                Object[] vObjectosFact = (Object[])vObjFact;

                Altosmesanterior Facturas = new Altosmesanterior();
                Facturas.Parameters["tipo"].Value = 2;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[2])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[2]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[3]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[4]);
                //Facturas.Parameters["codigo_sector"].Value = string.Empty;
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                Facturas.Dispose();
                vErro = Convert.ToString(vObjectosFact[0]);
            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }

        
        //EVENTO QUE LEVANTARA EL THREAD
        private void BtnAltosConsumidores_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                //  GenerarFacturaAltosConsumidores("C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\0001_PRUEBA.pdf", 0, 1, "0600");

                int contadorAgrupacion = 0;
                string vPeriodo = generarMesFacturacionNew(0);
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHAltos_Consumidores_Generales] 1";
                DataTable vDatos = vConexion.obtenerDataTable(vQuery);
                Boolean vExistePeriodo = false;
                int vContador = ObtenerCorrelativo(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                int vContadorPeriodo = vContador;
                Thread vThreadingFacturas;
                //for (int i = 0; i < 100; i++) //
                //{


                string vPathn = @"\\192.168.100.8\\facturas\\facturas" + vPeriodo + "\\"; 
                //string vPath = @"C:\centralizada01\\" + vPeriodo + "\\" + vSectorn + "_" + vDatosSectoressn.Rows[i]["SECTOR"].ToString();
                if (!System.IO.Directory.Exists(vPathn))
                    System.IO.Directory.CreateDirectory(vPathn);


                Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                              i =>
                              {
                                  if (vDatos.Rows.Count > 0) //&& i < 5)
                                  {

                                      string vCodigoAgrupacion = vDatos.Rows[i]["AC_cod_agrup_eeh"].ToString();
                                      string vQueryDetalle = "[EEHAltos_Consumidores_Generales] 2,'" + vCodigoAgrupacion + "'";
                                      DataTable vDatosDetalle = vConexion.obtenerDataTable(vQueryDetalle);
                                      if (vDatosDetalle.Rows.Count > 0)
                                      {

                                          string vQueryContadorFactura = "[EEHAltos_Consumidores_Generales] 3,'" + 2 + "'";
                                          string vPath = "";
                                          string vpathgeneral = "";
                                          //string vpathfisico = "";
                                         // string vpatheeh = "";
                                          string vSector = vDatos.Rows[i]["AC_sector"].ToString();
                                          string vCiudad = vDatos.Rows[i]["AC_ciudad"].ToString();
                                          string vCodigoAgrupacionEEH = vDatos.Rows[i]["AC_cod_agrup_eeh"].ToString().PadLeft(4, '0');
                                          string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                                          vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                          vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                          vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                          vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                          vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                                          if (vDatos.Rows[i]["AC_repartido"].ToString() == "CORREO")
                                             vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                          //   vpathgeneral = vPathn + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                                            
                                          if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "CORSO")
                                              vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORSO\\" + vSector + "\\" + vCiudad + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                         // vpathgeneral = vPathn  + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                        
                                          if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "EEH")
                                              vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vSector + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                          //vpathgeneral = vPathn  + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                                          Object[] vObjectoFactura = new object[4];
                                          vObjectoFactura[0] = vPath;
                                     //     vObjectoFactura[1] = vpathgeneral;
                                          vObjectoFactura[1] = 0;
                                          vObjectoFactura[2] = vContador;
                                          vObjectoFactura[3] = vCodigoAgrupacionEEH;
                                          GenerarFacturaAltosConsumidores(vObjectoFactura);
                                          contadorAgrupacion += vDatosDetalle.Rows.Count;
                                          vContador += vDatosDetalle.Rows.Count;
                                      }

                                  }
                              });
                if (vExistePeriodo)
                {
                    string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                    vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, 0);
                    DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                }

            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);

            }
        }

        public string generarMesFacturacionNew(int value)
        {

            string ultimoMesFacturacion = DateTime.Today.Year.ToString();
            ultimoMesFacturacion = ultimoMesFacturacion.Remove(0, 2);
            ultimoMesFacturacion += (DateTime.Today.Month - (value)).ToString().PadLeft(2, '0');
            return ultimoMesFacturacion;
        }

        private int ObtenerCorrelativo(Conexion vConexion, string vPeriodoActual, string vPeriodoAnterior, ref Boolean ExistePeriodo)
        {
            int vCorrelativo = 0;
            try
            {
                string vQueryObtenerCorrelativo = "[EEHInsert_Fact_Correlativo_Altos] 5";//"[EEHInsert_Fact_Correlativo_Altos] 1,'" + vPeriodoActual + "','" + vPeriodoAnterior + "'";
                DataTable vDatosCorrelativo = vConexion.obtenerDataTable(vQueryObtenerCorrelativo);

                if (vDatosCorrelativo.Rows.Count > 0)
                {
                    vCorrelativo = Convert.ToInt32(vDatosCorrelativo.Rows[0][0].ToString());
                    ExistePeriodo = true;
                }
            }
            catch (Exception)
            {


            }

            return vCorrelativo + 1;

        }
        private int ObtenerCorrelativoN(Conexion vConexion, string vPeriodoActual, string vPeriodoAnterior, ref Boolean ExistePeriodo)
        {
            int vCorrelativo = 0;
            try
            {
                string vQueryObtenerCorrelativo = "[EEHInsert_Fact_Correlativo_Altos] 6";//"[EEHInsert_Fact_Correlativo_Altos] 1,'" + vPeriodoActual + "','" + vPeriodoAnterior + "'";
                DataTable vDatosCorrelativo = vConexion.obtenerDataTable(vQueryObtenerCorrelativo);

                if (vDatosCorrelativo.Rows.Count > 0)
                {
                    vCorrelativo = Convert.ToInt32(vDatosCorrelativo.Rows[0][0].ToString());
                    ExistePeriodo = true;
                }

                //if (vDatosCorrelativo.Rows.Count > 0)
                //{
                //    for (int i = 0; i < vDatosCorrelativo.Rows.Count; i++)
                //    {
                //        if ((vDatosCorrelativo.Rows[i]["PERIODO"].ToString() == vPeriodoActual))
                //        {
                //            vCorrelativo = Convert.ToInt32(vDatosCorrelativo.Rows[i]["CONTADOR_FINAL"].ToString());
                //            ExistePeriodo = true;
                //            break; 
                //        }

                
                //        //para unica
                //        //  vCorrelativo = Convert.ToInt32(vDatosCorrelativo.Rows[0]["CONTADOR_FINAL"].ToString());
                //    }

                //}

            }
            catch (Exception)
            {


            }

            return vCorrelativo + 1;
        }

        private void btnEmail_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            String  vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHAltos_Consumidores_Generales] 6";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
             

                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vSector = vDatosCorreo.Rows[i]["AC_sector"].ToString();
                    string vCiudad = vDatosCorreo.Rows[i]["AC_ciudad"].ToString();
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["AC_cod_agrup_eeh"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["AC_nombre_inst"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                  //  string vAcOrden = (vDatosCorreo.Rows[i]["ac_orden"].ToString() == string.Empty ? "" : vDatosCorreo.Rows[i]["ac_orden"].ToString() + "_");
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["AC_cod_agrup_eeh"].ToString();
                    vDatos[1] = "ALTOS_CONSUMIDORES\\" + vPeriodo + "\\" + vPDF; //adjuntos
                    vDatos[2] = "hector.valerio";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacion(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      "+ vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);
                
            }
           


        }

        private void barButtonItem20_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            FacturaEspecialnfop Facturas3 = new FacturaEspecialnfop();
            try
            {
                string codigoAgrupa = "0052";
                Facturas3.Parameters["MES"].Value = "1803";
                Facturas3.Parameters["COD_AGRUPACION"].Value = codigoAgrupa;

                Facturas3.CreateDocument();
                string path = "C:\\facturas\\EstadoCuenta\\" + codigoAgrupa + " - " + "INFOP_ESTADO_CUENTA" + ".pdf";
                Facturas3.ExportToPdf(path);
                Facturas3.Dispose();
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }

           
        }

        private void barButtonItem21_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHconsulta_Gobierno]";
                DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                if (vDatos.Rows.Count > 0)
                    MessageBox.Show("Registros no actualizados .");
                else
                    MessageBox.Show("Registros actualizados exitoso.");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }

        private void barButtonItem22_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHConsulta_Altos]";
                DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                if (vDatos.Rows.Count > 0)
                    MessageBox.Show("Registros no  actualizados exitoso.");
                else
                    MessageBox.Show(" Registros  actualizados.");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }






        private void barButtonItem24_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                string vPath = @"C:\\facturas\\sin_agrupacion";
                if (!System.IO.Directory.Exists(vPath))
                    System.IO.Directory.CreateDirectory(vPath);
                string vPathDocumento = vPath+"\\"+"sin_agrupacion_" + DateTime.Now.Year + DateTime.Now.Month + DateTime.Now.Day + ".pdf";
                EEHFacturaSinAgrupacion Facturas = new EEHFacturaSinAgrupacion();
                Facturas.CreateDocument();
                Facturas.ExportToPdf(vPathDocumento);
                Facturas.Dispose();
            }
            catch (Exception ex)
            {

                //throw;
            }
           
        }

        private void barStaticItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHGobierno_Generales_Correo]";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["gc_cod_agrup_eeh"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["gc_nombre_inst"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + " - " + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["gc_cod_agrup_eeh"].ToString();
                    vDatos[1] = "GOBIERNO\\" + vPeriodo + "\\" + vPDF; //adjuntos
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionG(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }

        }

        private void barHeaderItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHGobierno_Generales_Correo]";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                string vPeriodo = generarMesFacturacionNew(0);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["gc_cod_agrup_eeh"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["gc_nombre_inst"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + " - " + vNombreInstitucion + " ESTADO_CUENTA" + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["gc_cod_agrup_eeh"].ToString();
                    vDatos[1] = "GOBIERNOESTADO\\" + vPeriodo + "\\" + vPDF;
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionE(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }

        }

        private void barButtonItem25_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string var = altos_con.Text.Trim();
            if (var != string.Empty)
                try
                {
                    //  GenerarFacturaAltosConsumidores("C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\0001_PRUEBA.pdf", 0, 1, "0600");



                    int contadorAgrupacion = 0;


                    string vQueryn = "[EEHAviso_Altos_Generales] 1," + var;
                    Conexion vConexion = new Conexion();
                    DataTable vDatosMesActual = vConexion.obtenerDataTable(vQueryn);



                    String vQuery = "[EEHAviso_Altos_Generales] 2," + vDatosMesActual.Rows[0][0].ToString();

                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;
                    Thread vThreadingFacturas;
                    //for (int i = 0; i < 100; i++) //
                    //{

                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                                 i =>
                                 {
                                     if (vDatos.Rows.Count > 0) //&& i < 5)
                                 {

                                     if (vDatosMesActual.Rows.Count > 0)
                                         {

                                             string vPath = "";
                                             string vSector = vDatos.Rows[i]["AC_sector"].ToString();
                                             string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                                             string vCiudad = vDatos.Rows[i]["AC_ciudad"].ToString();
                                             string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                                             string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                                             vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                                             if (vDatos.Rows[i]["AC_repartido"].ToString() == "CORREO")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                                             if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "CORSO")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORSO\\" + vSector + "\\" + vCiudad + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                                             if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "EEH")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vSector + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";


                                             Object[] vObjectoFactura = new object[4];
                                             vObjectoFactura[0] = vPath;
                                             vObjectoFactura[1] = 0;
                                             vObjectoFactura[2] = vContador;
                                             vObjectoFactura[3] = vClave;

                                             GenerarFacturaAltosConsumidoresD(vObjectoFactura);

                                          contadorAgrupacion += vDatosMesActual.Rows.Count;
                                             if (vDatosMesActual.Rows.Count > 1)
                                                 vContador = vContador + 1;//+= vDatosDetalle.Rows.Count;

                                         if (vExistePeriodo)
                                             {
                                                 string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                             vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                                 DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                             }

                                         }

                                     }
                                 });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }

        }


        private void lastupdate_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void barCheckItem1_CheckedChanged(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHAltos_Consumidores_Generales_Correo] 1";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);


                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vSector = vDatosCorreo.Rows[i]["AC_sector"].ToString();
                    string vCiudad = vDatosCorreo.Rows[i]["AC_ciudad"].ToString();
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["AC_cod_agrup_eeh"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["AC_nombre_inst"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    //  string vAcOrden = (vDatosCorreo.Rows[i]["ac_orden"].ToString() == string.Empty ? "" : vDatosCorreo.Rows[i]["ac_orden"].ToString() + "_");
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion +".pdf"; 
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["AC_cod_agrup_eeh"].ToString();
                    vDatos[1] = "CORREO\\GrandeClientes\\" + vPDF; //adjuntos
                    vDatos[2] = "hector.valerio";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacion(ref vCodigoResult, ref vMensajeResult, vDatos);
                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                    String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 8," + vCodigoAgrupacionEEH;
                    vConexion.obtenerDataTable(vQuerDetalleMasivo);

                }

      

            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }



        }

        private void barButtonItem26_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string var = altos_con.Text.Trim();
            if (var != string.Empty)
                try
                {
                    //  GenerarFacturaAltosConsumidores("C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\0001_PRUEBA.pdf", 0, 1, "0600");



                    int contadorAgrupacion = 0;


                    string vQueryn = "[EEHAviso_Altos_Generales] 1," + var;
                    Conexion vConexion = new Conexion();
                    DataTable vDatosMesActual = vConexion.obtenerDataTable(vQueryn);



                    String vQuery = "[EEHAviso_Altos_Generales] 2," + vDatosMesActual.Rows[0][0].ToString();

                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;
                    Thread vThreadingFacturas;
                    //for (int i = 0; i < 100; i++) //
                    //{

                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                                 i =>
                                 {
                                     if (vDatos.Rows.Count > 0) //&& i < 5)
                                     {

                                         //    string vCodigoAgrupacion = vDatos.Rows[i]["AC_cod_agrup_eeh"].ToString();
                                         //   string vQueryDetalle = "[EEHAltos_Consumidores_Generales_Diario] 2,'" + vCodigoAgrupacion + "'";
                                         //DataTable vDatosDetalle = vConexion.obtenerDataTable(vQueryDetalle);
                                         if (vDatosMesActual.Rows.Count > 0)
                                         {

                                             //         string vQueryContadorFactura = "[EEHAltos_Consumidores_Generales_Diario] 3,'" + 2 + "'";
                                             string vPath = "";
                                             string vSector = vDatos.Rows[i]["AC_sector"].ToString();
                                             string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                                             string vCiudad = vDatos.Rows[i]["AC_ciudad"].ToString();
                                             string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                                             string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                                             vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                                             if (vDatos.Rows[i]["AC_repartido"].ToString() == "CORREO")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                                             if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "CORSO")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORSO\\" + vSector + "\\" + vCiudad + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";

                                             if (vDatos.Rows[i]["AC_repartido"].ToString().Trim() == "EEH")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vSector + "\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";


                                             Object[] vObjectoFactura = new object[4];
                                             vObjectoFactura[0] = vPath;
                                             vObjectoFactura[1] = 0;
                                             vObjectoFactura[2] = vContador;
                                             vObjectoFactura[3] = vClave;



                                             GenerarFacturaAltosConsumidoresA(vObjectoFactura);
                                           
                                             //GenerarFacturaAltosConsumidores(vPath, 0, vContador, vCodigoAgrupacionEEH);
                                             contadorAgrupacion += vDatosMesActual.Rows.Count;
                                             if (vDatosMesActual.Rows.Count > 1)
                                                 vContador = vContador + 1;//+= vDatosDetalle.Rows.Count;

                                             if (vExistePeriodo)
                                             {
                                                 string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                                 vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                                 DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                             }

                                         }

                                     }
                                 });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }

        }

        private void barButtonItem28_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }
        private void barButtonItem29_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
            {
            Conexion vConexion = new Conexion();
            string vPeriodo = generarMesFacturacionNew(0);
            //copia facturas de altos consumidores en 100.8 facturas
            string fuente = (@"C:\\facturas\\ALTOS_CONSUMIDORES\\");
            string destino =(@"\\192.168.100.8\\facturas\\facturas"+ vPeriodo + "\\");
             DirectoryInfo dl = new DirectoryInfo(fuente); 

         
            if (!Directory.Exists(@"\\192.168.100.8\\facturas\\facturas" + vPeriodo + "\\"))
            {
                Directory.CreateDirectory(@"\\192.168.100.8\\facturas\\facturas" + vPeriodo + "\\");
            }
            if (File.Exists (fuente))
            {
                File.Copy(fuente, destino,true   );
            }
            fuente = (@"C:\facturas\ALTOS_CONSUMIDORES\");
            destino = (@"\\192.168.100.8\\facturas\\facturas" + vPeriodo + "\\");
            FileInfo[] directorios = null;

            directorios = dl.GetFiles("*", SearchOption.AllDirectories);

            string rutaExtendida = ""; 

            foreach (FileInfo docs in directorios)
            {
                // FileAttributes at = File.GetAttributes(docs.DirectoryName);
                rutaExtendida = docs.DirectoryName.Replace(fuente, "");


                //if (at.HasFlag(FileAttributes.Directory)){
                    if (!Directory.Exists(destino + rutaExtendida))
                        Directory.CreateDirectory(destino + rutaExtendida);
                //}
    
                File.Copy( docs.FullName, destino + rutaExtendida + "\\" +docs.Name  , true);
            } 
        }

        private void barButtonItem16_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void barButtonItem16_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string vPeriodo = generarMesFacturacionNew(0);
             
            string var = desgrupo.Text.Trim();
            if (var != string.Empty)
            {

                string vPathMasivo = @"C:\facturas\FACTURA_MES_ACTUAL\";

                if (!System.IO.Directory.Exists(vPathMasivo))
                    System.IO.Directory.CreateDirectory(vPathMasivo);


                FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
                Conexion vConexion = new Conexion();
                Boolean vExistePeriodo = false;
                int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                int vContadorPeriodo = vContador;

                string vQuery = "[EEHAviso_Gobierno_Generales] 4," + var;

                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);
                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + periodoFacturacion;

                        string prefijo = vDatosMesActual.Rows[i]["cod_agrup"].ToString();
                        //facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, clave, 0);
                        //decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                        //  string vPathDocumentoG = vPathn + prefijo + "_" + vNombreInstitucion + ".pdf";
                        AvisoGobierno agob = new AvisoGobierno();

                        try
                        {
                            FacEspecialMesActual FacturaEspecial = new FacEspecialMesActual();
                            FacturaEspecial.Parameters["Tipo"].Value = 1;
                            FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                            FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
                            FacturaEspecial.Parameters["clave"].Value = clave;
                            FacturaEspecial.Parameters["contador_factura"].Value = vContadorPeriodo; //enviar la siguiente
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_MES_ACTUAL\\" + prefijo + "_" + clave + "_" + vNombreInstitucion + ".pdf");
                            FacturaEspecial.Dispose();
                            //agregado nuevo 

                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContadorPeriodo, vContador, clave);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }




                        }
                        catch (Exception Ex)
                        {

                            Console.WriteLine(Ex.Message);
                        }
                    }
                }
 
            }

        }

        private void barButtonItem17_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string vPeriodo = generarMesFacturacionNew(0);
             string var = desgrupo.Text.Trim();
            if (var != string.Empty)
            {

                string vPathMasivo = @"C:\facturas\FACTURA_MES_ACTUAL\";

                if (!System.IO.Directory.Exists(vPathMasivo))
                    System.IO.Directory.CreateDirectory(vPathMasivo);

                FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
                Conexion vConexion = new Conexion();
                Boolean vExistePeriodo = false;
                int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                int vContadorPeriodo = vContador;

                string vQuery = "[EEHAviso_Gobierno_Generales] 4," + var;

                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);
                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + periodoFacturacion;

                        string prefijo = vDatosMesActual.Rows[i]["cod_agrup"].ToString();
                        //facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tipoFactura, clave, 0);
                        //decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                        //  string vPathDocumentoG = vPathn + prefijo + "_" + vNombreInstitucion + ".pdf";
                        AvisoGobierno agob = new AvisoGobierno();

                        try
                        {
                            FacturaMesanteriorGob FacturaEspecial = new FacturaMesanteriorGob();
                            FacturaEspecial.Parameters["Tipo"].Value = 2;
                            FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                            FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
                            FacturaEspecial.Parameters["clave"].Value = clave;
                            FacturaEspecial.Parameters["contador_factura"].Value = vContadorPeriodo; //enviar la siguiente
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_MES_ACTUAL\\" + prefijo + "_" + clave + "_" + vNombreInstitucion + "_" + 2 + "_" + ".pdf");
                            FacturaEspecial.Dispose();
                            //agregado nuevo 

                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContadorPeriodo, vContador, clave);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }




                        }
                        catch (Exception Ex)
                        {

                            Console.WriteLine(Ex.Message);
                        }
                    }
                }

            }
        }

        private void barButtonItem20_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion

            string vPeriodo = generarMesFacturacionNew(0);

            string var = desgrupo.Text.Trim();
            if (var != string.Empty)
            {
                string vPathMasivo = @"C:\facturas\FACTURA_MES_ACTUAL\";

                if (!System.IO.Directory.Exists(vPathMasivo))
                    System.IO.Directory.CreateDirectory(vPathMasivo);

                FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
                Conexion vConexion = new Conexion();
                Boolean vExistePeriodo = false;
                int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                int vContadorPeriodo = vContador;

                string vQuery = "[EEHAviso_Gobierno_Generales] 4," + var;

                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);
                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + periodoFacturacion;

                        string prefijo = vDatosMesActual.Rows[i]["cod_agrup"].ToString();
                        //facturaCorrelativo = facturaCorrelativo.obtenerFacturaCorrelativo(tFacturaMesanteriorGobipoFactura, clave, 0);
                        //decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                        //  string vPathDocumentoG = vPathn + prefijo + "_" + vNombreInstitucion + ".pdf";
                        AvisoGobierno agob = new AvisoGobierno();

                        try
                        {
                            FacturaTercerGob FacturaEspecial = new FacturaTercerGob();
                            FacturaEspecial.Parameters["Tipo"].Value = 3;
                            FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                            FacturaEspecial.Parameters["codigoAgrupa"].Value = prefijo;
                            FacturaEspecial.Parameters["clave"].Value = clave;
                            FacturaEspecial.Parameters["contador_factura"].Value = vContadorPeriodo; //enviar la siguiente
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\FACTURA_MES_ACTUAL\\" + prefijo + "_" + clave + "_" + vNombreInstitucion + "_" +3 + "_" + ".pdf");
                            FacturaEspecial.Dispose();
                            //agregado nuevo 

                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContadorPeriodo, vContador, clave);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }




                        }
                        catch (Exception Ex)
                        {

                            Console.WriteLine(Ex.Message);
                        }
                    }
                }

            }
        }

        private void barButtonItem18_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHconsulta_Gobierno]";
                DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                if (vDatos.Rows.Count > 0)
                    MessageBox.Show("Registros no actualizados .");
                else
                    MessageBox.Show("Registros actualizados exitoso.");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        private void barButtonItem19_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHGobierno_Generales_Correo]";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                    vDatos[1] = "GOBIERNO\\" + vPeriodo + "\\" + vPDF; //adjuntos
                                                                       //   vDatos[1] = "ENVIO\\" + vPDF; //adjuntos
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionG(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }
        }

        private void barButtonItem30_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHGobierno_Generales_Correo]";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                string vPeriodo = generarMesFacturacionNew(0);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + " ESTADO_CUENTA" + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                    vDatos[1] = "GOBIERNOESTADO\\" + vPeriodo + "\\" + vPDF;
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionE(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }
        }

        private void barButtonItem31_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vPeriodo = "";
            Conexion vConexion = new Conexion();

            //string vPathnG = "C:\\facturas\\FACTURA_GENERAL\\" + vPeriodo + "\\{0}";
                string vPathnG = @"\\192.168.100.8\\Facturas\\Facturas\\GOBIERNO\\" + vPeriodo + "\\{0}";
            vPathnG = string.Format(vPathnG, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(vPathnG))
                System.IO.Directory.CreateDirectory(vPathnG);
            FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
            string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
            String vClaves1 = "[EEHAviso_Gobierno_Generales] 5";
            DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);

            if (vClavesnuevo1.Rows.Count > 0)
            {
                for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
                {
                    string prefijoG = "";
                    string clave = "";
                    string vNombreInstitucionG = "";
                    string VcodigoAgrupacion = "";
                    VcodigoAgrupacion = "[EEHAviso_Gobierno_Generales] 6," + vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                    DataTable vAgrupacion = vConexion.obtenerDataTable(VcodigoAgrupacion);

                    prefijoG = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                    clave = vAgrupacion.Rows[0]["Clave"].ToString();
                    decimal contadorFacturas = (facturaCorrelativo.ContadorInicial + 1);
                    vNombreInstitucionG = vAgrupacion.Rows[0]["NomIns"].ToString();
                    vNombreInstitucionG = vNombreInstitucionG.Replace('/', ' ');
                    vNombreInstitucionG = vNombreInstitucionG.Replace('|', ' ');
                    vNombreInstitucionG = vNombreInstitucionG.Replace('"', ' ');
                    vNombreInstitucionG = vNombreInstitucionG.Replace('\'', ' ');
                    vNombreInstitucionG = vNombreInstitucionG.Replace(':', ' ');
                    string vPathDocumentoG = vPathnG + prefijoG + "_" + vNombreInstitucionG + ".pdf";
                    //AvisoGobierno agob = new AvisoGobierno();
                    try
                    {
                        GeneracionDiariaGobierno FacturaEspecial = new GeneracionDiariaGobierno();
                        FacturaEspecial.Parameters["Tipo"].Value = 4;
                        FacturaEspecial.Parameters["mes_facturacion"].Value = periodoFacturacion;
                        FacturaEspecial.Parameters["clave"].Value = prefijoG;
                        FacturaEspecial.Parameters["contador_factura"].Value = contadorFacturas; //enviar la siguiente
                        FacturaEspecial.CreateDocument();
                        FacturaEspecial.ExportToPdf(vPathDocumentoG);
                        FacturaEspecial.Dispose();
                        string vQueryFacturas = "[EEHAviso_Gob_Ciclo_Actual_D] " + 1 + "," + periodoFacturacion + "," + vAgrupacion.Rows[0]["codAgrupacion"].ToString() + "," + 4;
                        vQueryFacturas = String.Format(vQueryFacturas, prefijoG);
                        DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                        string vClavesFacturadas = string.Empty;
                        if (vDatosFacturas.Rows.Count > 0)
                        {
                            for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                            {
                                vClavesFacturadas += vDatosFacturas.Rows[x]["m_clave_primaria"].ToString() + ",";
                            }
                        }
                        vClavesFacturadas = vClavesFacturadas.Remove(vClavesFacturadas.Length - 1, 1);
                        string vQueryGuardarClaves = " [EEHAviso_Masivo_General]  18, '{0}', '{1}', '{2}'";
                        vQueryGuardarClaves = string.Format(vQueryGuardarClaves, vPeriodo, vDatosFacturas.Rows[0]["PREFIJO"].ToString(), vClavesFacturadas);
                        vConexion.obtenerDataTable(vQueryGuardarClaves);
                        String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 17," + vAgrupacion.Rows[0]["codAgrupacion"].ToString();
                        vConexion.obtenerDataTable(vQuerDetalleMasivo);
                    }
                    catch (Exception Ex)
                    {
                        Console.WriteLine(Ex.Message);
                    }
                }
            }
        }

        private void BtnAltosConsumdidores(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            {
                try
                {
                    int contadorAgrupacion = 0;
                    Conexion vConexion = new Conexion();
                    String vQuery = "[EEHAltos_Consumidores_Generales_Mercado] 1";
                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);
                    Boolean vExistePeriodo = false;
                    String vPeriodo = generarMesFacturacionNew(0);

                  
                     


                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 10 },  //10
                                     i =>
                                     {
                                     if (vDatos.Rows.Count > 0) //&& i < 5)
                                     {
                                             int vContador = ObtenerCorrelativo(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                                             int vContadorPeriodo = vContador;
                                             string vCodigoAgrupacion = vDatos.Rows[i]["CodAgrupacion"].ToString();
                                             string vQueryDetalle = "[EEHAltos_Consumidores_Generales_Mercado] 2,'" + vCodigoAgrupacion + "'";
                                             DataTable vDatosDetalle = vConexion.obtenerDataTable(vQueryDetalle);
                                             if (vDatosDetalle.Rows.Count > 0)
                                             {

                                                 string vQueryContadorFactura = "[EEHAltos_Consumidores_Generales] 3,'" + 2 + "'";
                                                 string vPath = "";
                                                 string vCodigoAgrupacionEEH = vDatos.Rows[i]["CodAgrupacion"].ToString().PadLeft(4, '0');
                                                 string vNombreInstitucion = vDatos.Rows[i]["NomIns"].ToString().Trim();
                                                 vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                                 vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                                 vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                                 vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                                 vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                                                 string VruthaServer = "";


                                                 if (vDatos.Rows[i]["IdMerCliente"].ToString() == "5" || vDatos.Rows[i]["IdMerCliente"].ToString() == "6")
                                                     {

                                                    string targetPath = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\GRANDESCLIENTES\\"; 
                                                    if (!System.IO.Directory.Exists(targetPath))
                                                    System.IO.Directory.CreateDirectory(targetPath);

                                                    
                                                     if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                                     {
                                                         vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\GRANDESCLIENTES\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         VruthaServer = targetPath + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         
                                                         if (File.Exists(VruthaServer))
                                                         {
                                                             string targetPath1 = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\"  + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\GRANDESCLIENTES\\"  ;
                                                             if (!System.IO.Directory.Exists(targetPath1))
                                                                 System.IO.Directory.CreateDirectory(targetPath1);
                                                                VruthaServer = targetPath1 + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + ".pdf";
                                                             
                                                         }
                                                     }



                                                     string targetPathE = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\GRANDESCLIENTES\\";
                                                     if (!System.IO.Directory.Exists(targetPathE))
                                                         System.IO.Directory.CreateDirectory(targetPathE);



                                                     if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                                     {
                                                         vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\GRANDESCLIENTES\\EEH\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         VruthaServer = targetPathE + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         
                                                         if (File.Exists(VruthaServer))
                                                         {
                                                            string targetPath1 = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo +"\\"+ DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")  + "\\GRANDESCLIENTES\\";
                                                            if (!System.IO.Directory.Exists(targetPath1))
                                                            System.IO.Directory.CreateDirectory(targetPath1);
                                                             VruthaServer = targetPath1 + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + ".pdf";
                                                          
                                                         }



                                                     }
                                                        

                                                     Object[] vObjectoFactura = new object[5];
                                                     vObjectoFactura[0] = vPath;
                                                     vObjectoFactura[1] = 0;
                                                     vObjectoFactura[2] = vContador;
                                                     vObjectoFactura[3] = vCodigoAgrupacionEEH;
                                                     vObjectoFactura[4] = VruthaServer;
                                                     GenerarFacturaAltosConsumidores(vObjectoFactura);
                                                     contadorAgrupacion += vDatosDetalle.Rows.Count;
                                                     vContador += vDatosDetalle.Rows.Count;

                                                     if (vExistePeriodo)
                                                     {
                                                         //string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                                         //vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_MENSUAL", generarMesFacturacionNew(0), vContadorPeriodo, vContador, 0);
                                                         //DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                                     }
                                                 }
                                                 else
                                                 {//funciona barras


                                                     string targetPath = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\CORPORATIVOS\\";
                                                     if (!System.IO.Directory.Exists(targetPath))
                                                         System.IO.Directory.CreateDirectory(targetPath);


                                                     if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                                     {
                                                       vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORPORATIVOS\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         VruthaServer = targetPath + vCodigoAgrupacionEEH + "_" + vNombreInstitucion  +".pdf";
                                                    
                                                         if (File.Exists(VruthaServer))
                                                         {
                                                             string targetPath1 = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\"+  DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")  +  "\\CORPORATIVOS\\" ;
                                                             if (!System.IO.Directory.Exists(targetPath1))
                                                                 System.IO.Directory.CreateDirectory(targetPath1);
                                                             VruthaServer = targetPath1 + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + ".pdf";
                                                            
                                                         }

                                                     }

                                                     string targetPathE = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\CORPORATIVOS\\";
                                                     if (!System.IO.Directory.Exists(targetPathE))
                                                         System.IO.Directory.CreateDirectory(targetPathE);



                                                     if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                                     {
                                                        vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORPORATIVOS\\EEH\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         VruthaServer = targetPathE + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                                                         
                                                         if (File.Exists(VruthaServer))
                                                         {
                                                             string targetPath1 = @"\\192.168.100.8\centralizada\ESPECIALES\" + vPeriodo + "\\"  + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\CORPORATIVOS\\";
                                                             if (!System.IO.Directory.Exists(targetPath1))
                                                                 System.IO.Directory.CreateDirectory(targetPath1);
                                                             VruthaServer = targetPath1 + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + ".pdf";
                                                          
                                                         }

                                                     }
                                                      
                                                     Object[] vObjectoFactura = new object[5];
                                                     vObjectoFactura[0] = vPath;
                                                     vObjectoFactura[1] = 0;
                                                     vObjectoFactura[2] = vContador;
                                                     vObjectoFactura[3] = vCodigoAgrupacionEEH;
                                                     vObjectoFactura[4] = VruthaServer;
                                                     GenerarFacturaAltosConsumidores2(vObjectoFactura);
                                                     contadorAgrupacion += vDatosDetalle.Rows.Count;
                                                     vContador += vDatosDetalle.Rows.Count;

                                                     if (vExistePeriodo)
                                                     {
                                                         //string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                                         // vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_MENSUAL", generarMesFacturacionNew(0), vContadorPeriodo, vContador, 0);
                                                         //DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                                     }


                                                 }


                                             }

                                         }
                                     });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }
            }

        }

        private void barButtonItem23_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            String vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHAltos_Consumidores_Generales_Mercado] 6";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {

                    if (vDatosCorreo.Rows[i]["IdMerCliente"].ToString() == "5" || vDatosCorreo.Rows[i]["IdMerCliente"].ToString() == "6")
                    {
                        string vPDF = "";
                        string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                        string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                        vCODIGOERROR = vCodigoAgrupacionEEH;
                        vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                        Object[] vDatos = new object[3];
                        vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                        vDatos[1] = "ALTOS_CONSUMIDORES\\" + vPeriodo + "\\GRANDECLIENTES" + "\\" + vPDF; //adjuntos
                        vDatos[2] = "Hector.Valerio";
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.notificarFacturacion(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");

                    }
                    else
                    {
                        string vPDF = "";
                        string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                        string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                        vCODIGOERROR = vCodigoAgrupacionEEH;
                        vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                        Object[] vDatos = new object[3];
                        vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                        vDatos[1] = "ALTOS_CONSUMIDORES\\" + vPeriodo + "\\CORPORATIVOS" + "\\" + vPDF; //adjuntos
                        vDatos[2] = "Hector.Valerio";
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.notificarFacturacion(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");

                    }



                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);

            }





        }

        private void barButtonItem25_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            string var = altos_con.Text.Trim();
            if (var != string.Empty)
                try
                {
                    int contadorAgrupacion = 0;
                    string vPathMasivo = @"C:\facturas\ALTOS_CONSUMIDORES\CORREO";

                    if (!System.IO.Directory.Exists(vPathMasivo))
                        System.IO.Directory.CreateDirectory(vPathMasivo);
                    string vPathMasivo1 = @"C:\facturas\ALTOS_CONSUMIDORES\EEH";

                    if (!System.IO.Directory.Exists(vPathMasivo1))
                        System.IO.Directory.CreateDirectory(vPathMasivo1);

                    Conexion vConexion = new Conexion();
                    String vQuery = "[EEHAviso_Altos_Generales] 4," + var;
                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);
                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;
                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 }, i =>
                    {
                        if (vDatos.Rows.Count > 0) //&& i < 5)
                        {

                            string vPath = "";
                            string fuente = "";
                            string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                            string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                            string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                            vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                            vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                            vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                            vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                            vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                            if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vClave + "_" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" +  "1" +"_"+ ".pdf";
                            if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vClave + "_" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + "1" + "_" + ".pdf";
                            Object[] vObjectoFactura = new object[5];
                            vObjectoFactura[0] = vPath;
                            vObjectoFactura[1] = fuente;
                            vObjectoFactura[2] = 0;
                            vObjectoFactura[3] = vContador;
                            vObjectoFactura[4] = vClave;
                            GenerarFacturaAltosConsumidoresD(vObjectoFactura);
                            contadorAgrupacion += vDatos.Rows.Count;
                            if (vDatos.Rows.Count > 1)
                                vContador = vContador + 1;//+= vDatosDetalle.Rows.Count;

                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }


                        }
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

        }

        private void barButtonItem26_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string var = altos_con.Text.Trim();
            if (var != string.Empty)
                try
                {
                    //  GenerarFacturaAltosConsumidores("C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\0001_PRUEBA.pdf", 0, 1, "0600");
                    int contadorAgrupacion = 0;
                    string vPathMasivo = @"C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO";

                    if (!System.IO.Directory.Exists(vPathMasivo))
                        System.IO.Directory.CreateDirectory(vPathMasivo);
                    string vPathMasivo1 = @"C:\\facturas\\ALTOS_CONSUMIDORES\\EEH";

                    if (!System.IO.Directory.Exists(vPathMasivo1))
                        System.IO.Directory.CreateDirectory(vPathMasivo1);

                   
                    Conexion vConexion = new Conexion();
                    String vQuery = "[EEHAviso_Altos_Generales]  4," + var;
                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;

                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                                 i =>
                                 {
                                     if (vDatos.Rows.Count > 0) //&& i < 5)
                                     {

                                         string vPath = "";
                                         string fuente = "";
                                         string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                                         string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                                         string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                                         vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                         vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                         vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                         vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                         vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');

                                         if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                             vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vClave + "_" + vCodigoAgrupacionEEH + "_." + vNombreInstitucion + "_" + "2" + "_" + ".pdf";

                                         if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                             vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vClave + "_" + vCodigoAgrupacionEEH + "_." + vNombreInstitucion + "_" + "2" + "_" + ".pdf";

                                         Object[] vObjectoFactura = new object[5];
                                         vObjectoFactura[0] = vPath;
                                         vObjectoFactura[1] = fuente;
                                         vObjectoFactura[2] = 0;
                                         vObjectoFactura[3] = vContador;
                                         vObjectoFactura[4] = vClave;

                                         GenerarFacturaAltosConsumidoresA(vObjectoFactura);

                                         //GenerarFacturaAltosConsumidores(vPath, 0, vContador, vCodigoAgrupacionEEH);
                                         contadorAgrupacion += vDatos.Rows.Count;
                                         if (vDatos.Rows.Count > 1)
                                             vContador = vContador + 1;//+= vDatosDetalle.Rows.Count;

                                         if (vExistePeriodo)
                                         {
                                             string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                             vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                             DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                         }

                                     }

                                 });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }

        }

        private void barButtonItem32_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private static void GenerarFacturaAltosConsumidoresE(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            try
            { 
                Object[] vObjectosFact = (Object[])vObjFact;

                EEHFacturaAltosEspecial Facturas = new EEHFacturaAltosEspecial();
                Facturas.Parameters["tipo"].Value = 3;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[2])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[2]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[3]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[4]);
                //Facturas.Parameters["codigo_sector"].Value = string.Empty;
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                //Facturas.ExportToPdf(Convert.ToString(vObjectosFact[1]));//(vPath);
                Facturas.Dispose();
                vErro = Convert.ToString(vObjectosFact[0]);

            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }
        private void barButtonItem33_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string var = altos_con.Text.Trim();
            if (var != string.Empty)
                try
                {
                    int contadorAgrupacion = 0;

                   
                    string vPathMasivo = @"C:\facturas\ALTOS_CONSUMIDORES\CORREO";

                    if (!System.IO.Directory.Exists(vPathMasivo))
                        System.IO.Directory.CreateDirectory(vPathMasivo);
                    string vPathMasivo1 = @"C:\facturas\ALTOS_CONSUMIDORES\EEH";

                    if (!System.IO.Directory.Exists(vPathMasivo1))
                        System.IO.Directory.CreateDirectory(vPathMasivo1);
                    string vQueryn = "[EEHAviso_Altos_Generales] 1," + var;
                    Conexion vConexion = new Conexion();
                    DataTable vDatosMesActual = vConexion.obtenerDataTable(vQueryn);



                    String vQuery = "[EEHAviso_Altos_Generales] 2," + vDatosMesActual.Rows[0][0].ToString();

                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;


                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                                 i =>
                                 {
                                     if (vDatos.Rows.Count > 0) //&& i < 5)
                                     {


                                         if (vDatosMesActual.Rows.Count > 0)
                                         {
                                             string vPath = "";
                                             string fuente = "";
                                             string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                                             string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                                             string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                                             vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                             vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');


                                             if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vClave + "_" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + "3" + "_" + ".pdf";

                                             if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                                 vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vClave + "_" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "_" + "3" + "_" + ".pdf";




                                             Object[] vObjectoFactura = new object[5];
                                             vObjectoFactura[0] = vPath;
                                             vObjectoFactura[1] = fuente;
                                             vObjectoFactura[2] = 0;
                                             vObjectoFactura[3] = vContador;
                                             vObjectoFactura[4] = vClave;





                                             GenerarFacturaAltosConsumidoresE(vObjectoFactura);

                                             //GenerarFacturaAltosConsumidores(vPath, 0, vContador, vCodigoAgrupacionEEH);
                                             contadorAgrupacion += vDatosMesActual.Rows.Count;
                                             if (vDatosMesActual.Rows.Count > 1)
                                                 vContador = vContador + 1;//+= vDatosDetalle.Rows.Count;

                                             if (vExistePeriodo)
                                             {
                                                 string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                                 vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                                 DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                             }

                                         }

                                     }
                                 });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }

        }

        private static void GenerarAltosConsumidoresCuarto(Object vObjFact)//(string vPath, int vRango, int vContadorFacturas, string vCodigoAgrupacion)
        {
            string vErro = "";
            try
            {
                 
                Object[] vObjectosFact = (Object[])vObjFact;

                EEHfaccuarto Facturas = new EEHfaccuarto();
                Facturas.Parameters["tipo"].Value = 4;
                Facturas.Parameters["pagina"].Value = (1000 * Convert.ToInt32(vObjectosFact[2])) + 1;
                Facturas.Parameters["maximo"].Value = 1000 * (Convert.ToInt32(vObjectosFact[2]) + 1);
                Facturas.Parameters["contador_factura"].Value = Convert.ToInt32(vObjectosFact[3]);
                Facturas.Parameters["codigoAgrupa"].Value = Convert.ToString(vObjectosFact[4]);
                //Facturas.Parameters["codigo_sector"].Value = string.Empty;
                Facturas.CreateDocument();
                Facturas.ExportToPdf(Convert.ToString(vObjectosFact[0]));//(vPath);
                //Facturas.ExportToPdf(Convert.ToString(vObjectosFact[1]));//(vPath);
                Facturas.Dispose();
                vErro = Convert.ToString(vObjectosFact[0]);
                 
            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message + " " + vErro);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }


        private void barButtonItem34_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {


            string var = altos_con.Text.Trim();
            if (var != string.Empty)

                try
                {

                    int contadorAgrupacion = 0;



                    Conexion vConexion = new Conexion();

                 
                    string vPathMasivo = @"C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO";

                    if (!System.IO.Directory.Exists(vPathMasivo))
                        System.IO.Directory.CreateDirectory(vPathMasivo);
                    string vPathMasivo1 = @"C:\\facturas\\ALTOS_CONSUMIDORES\\EEH";

                    if (!System.IO.Directory.Exists(vPathMasivo1))
                        System.IO.Directory.CreateDirectory(vPathMasivo1);


                    String vQuery = "[EEHAviso_Altos_Generales] 4," + var;

                    DataTable vDatos = vConexion.obtenerDataTable(vQuery);

                    Boolean vExistePeriodo = false;
                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    //int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContadorPeriodo = vContador;



                    Parallel.For(0, vDatos.Rows.Count, new ParallelOptions { MaxDegreeOfParallelism = 30 },
                      i =>
                      {
                          if (vDatos.Rows.Count > 0) //&& i < 5)



                          {



                              string vPath = "";
                              string fuente = "";
                              string vClave = vDatos.Rows[i]["clave_primaria"].ToString();
                              string vCodigoAgrupacionEEH = vDatos.Rows[i]["cod_agrup"].ToString().PadLeft(4, '0');
                              string vNombreInstitucion = vDatos.Rows[i]["AC_nombre_inst"].ToString().Trim();
                              vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                              vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                              vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                              vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                              vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');



                              if (vDatos.Rows[i]["IdFormaEntrega"].ToString() == "1")
                                  vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\CORREO\\" + vCodigoAgrupacionEEH + "_" + vClave + "_" + vNombreInstitucion + "4" + ".pdf";

                              if (vDatos.Rows[i]["IdFormaEntrega"].ToString().Trim() == "2")
                                  vPath = "C:\\facturas\\ALTOS_CONSUMIDORES\\EEH\\" + vCodigoAgrupacionEEH + "_" + vNombreInstitucion + "4" + ".pdf";


                              Object[] vObjectoFactura = new object[5];
                              vObjectoFactura[0] = vPath;
                              vObjectoFactura[1] = fuente;
                              vObjectoFactura[2] = 0;
                              vObjectoFactura[3] = vContador;
                              vObjectoFactura[4] = vClave;





                              GenerarAltosConsumidoresCuarto(vObjectoFactura);
                              contadorAgrupacion += vDatos.Rows.Count;




                              if (vDatos.Rows.Count > 1)
                                  vContador = vContador + 1;

                              if (vExistePeriodo)
                              {
                                  string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                  vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_DIARIO", generarMesFacturacionNew(0), vContadorPeriodo, vContador, vClave);
                                  DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                              }



                          }
                      });


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                }
        }

        private void labelControl2_Click(object sender, EventArgs e)
        {

        }

 

        private void barButtonItem37_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            int maximo = 1000;
            int rango = 0;
            Conexion vConexion = new Conexion();
            String vQueryoObtenerSectores = "[EEHAviso_Masivo_General] 36";
            DataTable vDatosSectores = vConexion.obtenerDataTable(vQueryoObtenerSectores);
            try
            {
                if (vDatosSectores.Rows.Count > 0)
                    for (int i = 0; i < vDatosSectores.Rows.Count; i++)
                    {
                        Boolean vExistePeriodo = false;
                        int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                        int vContadorPeriodo = vContador;
                        string vClave = vDatosSectores.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                        string Nombre = vDatosSectores.Rows[i]["m_nombre_abonado"].ToString();
                        Nombre = Nombre.Replace('/', ' ');
                        Nombre = Nombre.Replace('|', ' ');
                        Nombre = Nombre.Replace('"', ' ');
                        Nombre = Nombre.Replace('\'', ' ');
                        Nombre = Nombre.Replace(':', ' ');

                        string SectorEEHReparto = vDatosSectores.Rows[i]["SECTOR_ID"].ToString();
                        string VSectorReparto = vDatosSectores.Rows[i]["SECTOR_EEH"].ToString();
                        string vPath = @"\\192.168.100.8\\centralizada\\\REPARTOFACTURAS\\" + vPeriodo + "\\" + VSectorReparto + "\\{0}";

                        vPath = string.Format(vPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                        if (!System.IO.Directory.Exists(vPath))
                            System.IO.Directory.CreateDirectory(vPath);
                        string vPathRepartoAltos = vPath + vClave + "_" + Nombre + ".pdf";
                        FactRepartoAltosConsumidores FacturasAltosConsumidoresReparto = new FactRepartoAltosConsumidores();
                        FacturasAltosConsumidoresReparto.Parameters["tipo"].Value = 6;
                        FacturasAltosConsumidoresReparto.Parameters["codigoAgrupa"].Value = vClave;
                        FacturasAltosConsumidoresReparto.Parameters["contador_factura"].Value = vContador;
                        FacturasAltosConsumidoresReparto.CreateDocument();
                        FacturasAltosConsumidoresReparto.ExportToPdf(vPathRepartoAltos);
                        FacturasAltosConsumidoresReparto.Dispose();
                        String vQuerDetalleGReparto = "[EEHAviso_Masivo_General] 37," + vClave;
                        vConexion.obtenerDataTable(vQuerDetalleGReparto);
                    }

            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex.Message);
                genericos.Log("FACTURAS ALTOS CONSUMIODRES QUE SE ENTREGAN POR REPARTO ", Ex.Message, "");
            }




        }

        private void cbSectorn_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void barButtonItem12_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            string targetPath = @"\\192.168.100.8\\centralizada\\MASIVO\\" + vPeriodo + "\\{0}";
            targetPath = string.Format(targetPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);
            try
            {

                string vQueryDetalle1 = "[EEHAviso_Masivo_General] 22";
                DataTable vDatosDetalle1 = vConexion.obtenerDataTable(vQueryDetalle1);
                if (vDatosDetalle1.Rows.Count > 0)

                    for (int i = 0; i < vDatosDetalle1.Rows.Count; i++)
                    {
                        string vQueryDetalleC = "[EEHAviso_Masivo_General] 24";
                        DataTable vDatosDetalleC = vConexion.obtenerDataTable(vQueryDetalleC);
                        if (vDatosDetalleC.Rows.Count > 0)
                        {
                            string vClave = vDatosDetalle1.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                            string Nombre = vDatosDetalle1.Rows[i]["M_NOMBRE_ABONADO"].ToString();
                            string vPathDocumentoGG = targetPath + vClave + "_" + Nombre + ".pdf";
                            FacturaEEHMasivoCorreo FacturasMasivoCorreo = new FacturaEEHMasivoCorreo();
                            FacturasMasivoCorreo.Parameters["obtener_todos"].Value = 0;
                            FacturasMasivoCorreo.Parameters["pagina"].Value = 1;
                            FacturasMasivoCorreo.Parameters["maximo"].Value = 100;
                            FacturasMasivoCorreo.Parameters["clave_primaria"].Value = vClave;
                            FacturasMasivoCorreo.CreateDocument();
                            FacturasMasivoCorreo.ExportToPdf(vPathDocumentoGG);
                            FacturasMasivoCorreo.Dispose();
                            String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 23," + vClave;
                            vConexion.obtenerDataTable(vQuerDetalleMasivo);
                        }
                    }

            }
            catch (Exception EX)
            {


            }

            try
            {
                string[] filePaths1 = Directory.GetFiles(@"\\192.168.100.58\\ArchivosAdjuntos\\Reparto_Correo\\");
                foreach (string filePath1 in filePaths1)
                    File.Delete(filePath1);
                //copia facturas de altos consumidores en 100.8 facturas
                string fuente = @"\\192.168.100.8\Centralizada\MASIVO\" + vPeriodo + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                string destino = (@"\\192.168.100.58\\ArchivosAdjuntos\\Reparto_Correo\\");
                DirectoryInfo dl = new DirectoryInfo(fuente);
                if (File.Exists(fuente))
                {
                    File.Copy(fuente, destino, true);
                }
                fuente = @"\\192.168.100.8\Centralizada\MASIVO\" + vPeriodo + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                destino = (@"\\192.168.100.58\\ArchivosAdjuntos\\Reparto_Correo\\");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                string rutaExtendida = "";
                foreach (FileInfo docs in directorios)
                {
                    // FileAttributes at = File.GetAttributes(docs.DirectoryName);
                    rutaExtendida = docs.DirectoryName.Replace(fuente, "");
                    //if (at.HasFlag(FileAttributes.Directory)){
                    if (!Directory.Exists(destino + rutaExtendida))
                        Directory.CreateDirectory(destino);
                    //}
                    File.Copy(docs.FullName, destino + "\\" + docs.Name, true);
                }

            }
            catch (Exception ex)
            {


            }
        }

        private void barButtonItem38_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            string targetMSPath = @"\\192.168.100.8\\centralizada\\MASIVO\\" + vPeriodo + "\\{0}";
            targetMSPath = string.Format(targetMSPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(targetMSPath))
                System.IO.Directory.CreateDirectory(targetMSPath);
            try
            {

                string vQueryMSdetalle = "[EEHAviso_Masivo_General] 22";
                DataTable vDatosDetalleMS = vConexion.obtenerDataTable(vQueryMSdetalle);
                if (vDatosDetalleMS.Rows.Count > 0)

                    for (int i = 0; i < vDatosDetalleMS.Rows.Count; i++)
                    {
                        string vQueryDetallemsC = "[EEHAviso_Masivo_General] 24";
                        DataTable vDatosDetalleMSC = vConexion.obtenerDataTable(vQueryDetallemsC);
                        if (vDatosDetalleMSC.Rows.Count > 0)
                        {
                            string vClavemsc = vDatosDetalleMS.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                            string Nombremsc = vDatosDetalleMS.Rows[i]["M_NOMBRE_ABONADO"].ToString();
                            string vPathDocumentoMSC = targetMSPath + vClavemsc + "_" + Nombremsc + ".pdf";
                            FacturaEEHMasivoCorreo FacturasMasivoCorreo = new FacturaEEHMasivoCorreo();
                            FacturasMasivoCorreo.Parameters["obtener_todos"].Value = 0;
                            FacturasMasivoCorreo.Parameters["pagina"].Value = 1;
                            FacturasMasivoCorreo.Parameters["maximo"].Value = 100;
                            FacturasMasivoCorreo.Parameters["clave_primaria"].Value = vClavemsc;
                            FacturasMasivoCorreo.CreateDocument();
                            FacturasMasivoCorreo.ExportToPdf(vPathDocumentoMSC);
                            FacturasMasivoCorreo.Dispose();
                            String vQuerDetalleMasivoM = "[EEHAviso_Masivo_General] 38," + vClavemsc;
                            vConexion.obtenerDataTable(vQuerDetalleMasivoM);
                        }
                    }

            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message);
                 genericos.Log("FACTURACION ", EX.Message, "");

            }

            try
            {
                string[] filePaths1RP = Directory.GetFiles(@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Reparto_Correo\\");
                foreach (string fileParp1 in filePaths1RP)
                    File.Delete(fileParp1);
                //copia facturas de altos consumidores en 100.8 facturas
                string fuenteMs = @"\\192.168.100.8\Centralizada\MASIVO\" + vPeriodo + "\\{0}";
                fuenteMs = string.Format(fuenteMs, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                string destinoMS = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Reparto_Correo\\");
                DirectoryInfo dl = new DirectoryInfo(fuenteMs);
                if (File.Exists(fuenteMs))
                {
                    File.Copy(fuenteMs, destinoMS, true);
                }
                fuenteMs = @"\\192.168.100.8\Centralizada\MASIVO\" + vPeriodo + "\\{0}";
                fuenteMs = string.Format(fuenteMs, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                destinoMS = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Reparto_Correo\\");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                string rutaExtendida = "";
                foreach (FileInfo docs in directorios)
                {
                    // FileAttributes at = File.GetAttributes(docs.DirectoryName);
                    rutaExtendida = docs.DirectoryName.Replace(fuenteMs, "");
                    //if (at.HasFlag(FileAttributes.Directory)){
                    if (!Directory.Exists(destinoMS + rutaExtendida))
                        Directory.CreateDirectory(destinoMS);
                    //}
                    File.Copy(docs.FullName, destinoMS + "\\" + docs.Name, true);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                genericos.Log("FACTURACION ", ex.Message, "");

            }
        }

        private void barButtonItem35_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            String vClaves1 = "[EEHAltos_Consumidores_Generales] 9";
            DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);
            string vAgrupa1 = string.Empty;
            string vNombreInstitucion1 = string.Empty;

            string targetPath = @"\\192.168.100.8\\centralizada\\FISICO\\" + vPeriodo + "\\GRANDESCLIENTES" + "\\{0}";
            //string targetPath = @"C:\centralizada01\\centralizada\\FISICO\\" + vPeriodo + "\\GRANDESCLIENTES" + "\\{0}";
            targetPath = string.Format(targetPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);
            string targetPathc = @"\\192.168.100.8\\centralizada\\FISICO\\" + vPeriodo + "\\CORPORATIVOS" + "\\{0}";
            //string targetPathc = @"C:\centralizada01\\centralizada\\FISICO\\" + vPeriodo + "\\CORPORATIVOS" + "\\{0}";
            targetPathc = string.Format(targetPathc, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(targetPathc))
                System.IO.Directory.CreateDirectory(targetPathc);




            for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
            {
                if (vClavesnuevo1.Rows.Count > 0) //&& i < 5)
                {
                    Boolean vExistePeriodo = false;

                    string vCodigoAgrupacion1 = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                    string vQueryDetalle1 = "[EEHAltos_Consumidores_Generales] 10,'" + vCodigoAgrupacion1 + "'";
                    DataTable vDatosDetalle1 = vConexion.obtenerDataTable(vQueryDetalle1);

                    if (vDatosDetalle1.Rows.Count > 0)
                    {
                        int vContador = ObtenerCorrelativo(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                        int vContadorPeriodo = vContador;
                        vAgrupa1 = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                        vNombreInstitucion1 = vClavesnuevo1.Rows[i]["NomIns"].ToString().Trim();
                        vNombreInstitucion1 = vNombreInstitucion1.Replace('/', ' ');
                        vNombreInstitucion1 = vNombreInstitucion1.Replace('|', ' ');
                        vNombreInstitucion1 = vNombreInstitucion1.Replace('"', ' ');
                        vNombreInstitucion1 = vNombreInstitucion1.Replace('\'', ' ');
                        vNombreInstitucion1 = vNombreInstitucion1.Replace(':', ' ');
                          if (vClavesnuevo1.Rows[i]["IdMerCliente"].ToString() == "5" || vClavesnuevo1.Rows[i]["IdMerCliente"].ToString() == "6")
                       // if (vClavesnuevo1.Rows[i]["IdMerCliente"].ToString() == "6")
                        {
                            string vPathDocumentoGG = targetPath + vAgrupa1 + "_" + vNombreInstitucion1 + ".pdf";
                            AltosConsumidoresTodos FacturasAltosConsumidores1 = new AltosConsumidoresTodos();
                            FacturasAltosConsumidores1.Parameters["tipo"].Value = 1;
                            FacturasAltosConsumidores1.Parameters["codigoAgrupa"].Value = vAgrupa1;
                            FacturasAltosConsumidores1.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                            FacturasAltosConsumidores1.CreateDocument();
                            FacturasAltosConsumidores1.ExportToPdf(vPathDocumentoGG);
                            FacturasAltosConsumidores1.Dispose();
                            String vQuerDetalleMasivo = "[EEHAltos_Consumidores_Generales] 11," + vCodigoAgrupacion1;
                            vConexion.obtenerDataTable(vQuerDetalleMasivo);
                            string vQueryFacturas = "[EEHAltos_Consumidores_TD_Mercados] 2,{0}";
                            vQueryFacturas = String.Format(vQueryFacturas, vAgrupa1);
                            DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                            string vClavesFacturadas = string.Empty;
                            if (vDatosFacturas.Rows.Count > 0)
                            {
                                for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                                {
                                    vClavesFacturadas += vDatosFacturas.Rows[x]["clave"].ToString() + ",";
                                }
                                vClavesFacturadas = vClavesFacturadas.Remove(vClavesFacturadas.Length - 1, 1);
                                string vQueryGuardarClaves = " [EEHAviso_Masivo_General]  6, '{0}', '{1}', '{2}'";
                                vQueryGuardarClaves = string.Format(vQueryGuardarClaves, vPeriodo, vDatosFacturas.Rows[0]["PREFIJO"].ToString(), vClavesFacturadas);
                                vConexion.obtenerDataTable(vQueryGuardarClaves);
                            }
                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_MENSUAL", generarMesFacturacionNew(0), vContadorPeriodo, vContador, 0);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }

                        }
                        else
                        {
                            string vPathDocumentoGG = targetPathc + vAgrupa1 + "_" + vNombreInstitucion1 + ".pdf";
                            AltosConsumidoresTodos FacturasAltosConsumidores1 = new AltosConsumidoresTodos();
                            FacturasAltosConsumidores1.Parameters["tipo"].Value = 3;
                            FacturasAltosConsumidores1.Parameters["codigoAgrupa"].Value = vAgrupa1;
                            FacturasAltosConsumidores1.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                            FacturasAltosConsumidores1.CreateDocument();
                            FacturasAltosConsumidores1.ExportToPdf(vPathDocumentoGG);
                            FacturasAltosConsumidores1.Dispose();
                            String vQuerDetalleMasivo = "[EEHAltos_Consumidores_Generales] 11," + vCodigoAgrupacion1;
                            vConexion.obtenerDataTable(vQuerDetalleMasivo);
                            string vQueryFacturas = "[EEHAltos_Consumidores_TD_Mercados] 2,{0}";
                            vQueryFacturas = String.Format(vQueryFacturas, vAgrupa1);
                            DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                            string vClavesFacturadas = string.Empty;
                            if (vDatosFacturas.Rows.Count > 0)
                            {
                                for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                                {
                                    vClavesFacturadas += vDatosFacturas.Rows[x]["clave"].ToString() + ",";
                                }
                                vClavesFacturadas = vClavesFacturadas.Remove(vClavesFacturadas.Length - 1, 1);
                                string vQueryGuardarClaves = " [EEHAviso_Masivo_General]  6, '{0}', '{1}', '{2}'";
                                vQueryGuardarClaves = string.Format(vQueryGuardarClaves, vPeriodo, vDatosFacturas.Rows[0]["PREFIJO"].ToString(), vClavesFacturadas);
                                vConexion.obtenerDataTable(vQueryGuardarClaves);
                            }
                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 2, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "ALTOS_MENSUAL", generarMesFacturacionNew(0), vContadorPeriodo, vContador, 0);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }

                        }
                    }

                }
            }
            try
            {
                string[] filePaths1 = Directory.GetFiles(@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Facturas\\GRANDESCLIENTES");
                foreach (string filePath1 in filePaths1)
                    File.Delete(filePath1);
                //copia facturas de altos consumidores en 100.8 facturas
                string fuente = @"\\192.168.100.8\Centralizada\FISICO\" + vPeriodo + "\\GRANDESCLIENTES" + "\\{0}";
                // string fuente = @"C:\centralizada01\\centralizada\\FISICO\\" + vPeriodo + "\\GRANDESCLIENTES" + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                string destino = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Facturas\\GRANDESCLIENTES\\");
                DirectoryInfo dl = new DirectoryInfo(fuente);
                if (File.Exists(fuente))
                {
                    File.Copy(fuente, destino, true);
                }
                fuente = @"\\192.168.100.8\Centralizada\FISICO\" + vPeriodo + "\\GRANDESCLIENTES" + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                destino = (@"\\192.168.100.59\e\ArchivosAdjuntos\Facturas\GRANDESCLIENTES\");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                string rutaExtendida = "";

                foreach (FileInfo docs in directorios)
                {
                    rutaExtendida = docs.DirectoryName.Replace(fuente, "");
                    if (!Directory.Exists(destino + rutaExtendida))
                        Directory.CreateDirectory(destino);
                    File.Copy(docs.FullName, destino + "\\" + docs.Name, true);
                }


            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
            try
            {

                vPeriodo = generarMesFacturacionNew(0);
                string[] filePaths1 = Directory.GetFiles(@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Facturas\\CORPORATIVOS");
                foreach (string filePath1 in filePaths1)
                    File.Delete(filePath1);
                //copia facturas de altos consumidores en 100.8 facturas
                //   string fuente = @"\\192.168.100.8\Centralizada\FISICO\" + vPeriodo + "\\GRANDESCLIENTE" + "\\{0}";
                string fuente = @"C:\centralizada01\\centralizada\\FISICO\\" + vPeriodo + "\\CORPORATIVOS" + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                string destino = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Facturas\\CORPORATIVOS\\");
                DirectoryInfo dl = new DirectoryInfo(fuente);
                if (File.Exists(fuente))
                {
                    File.Copy(fuente, destino, true);
                }
                fuente = @"C:\centralizada01\\centralizada\\FISICO\\" + vPeriodo + "\\CORPORATIVOS" + "\\{0}";
                fuente = string.Format(fuente, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                destino = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Facturas\\CORPORATIVOS\\");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                string rutaExtendida = "";

                foreach (FileInfo docs in directorios)
                {
                    rutaExtendida = docs.DirectoryName.Replace(fuente, "");
                    if (!Directory.Exists(destino + rutaExtendida))
                        Directory.CreateDirectory(destino);
                    File.Copy(docs.FullName, destino + "\\" + docs.Name, true);
                }


            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message);
                genericos.Log("FACTURACION ", EX.Message, "");
            }

        }

        private void barButtonItem36_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery1 = "[EEHAltos_Consumidores_Generales_Correo] 3";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery1);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                 
                   if (vDatosCorreo.Rows[i]["IdMerCliente"].ToString() == "5" || vDatosCorreo.Rows[i]["IdMerCliente"].ToString() == "6")
                        {
                        string vPDF = "";

                        string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                        string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                        vCODIGOERROR = vCodigoAgrupacionEEH;
                        vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                        Object[] vDatos = new object[3];
                        vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                        vDatos[1] = "Facturas\\GRANDESCLIENTES\\" + vPDF; //adjuntos
                        vDatos[2] = "Hector.Valerio";
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.notificarFacturacionALTOS(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");


                    }
                    else
                    {
                        string vPDF = "";

                        string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                        string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                        vCODIGOERROR = vCodigoAgrupacionEEH;
                        vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                        Object[] vDatos = new object[3];
                        vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                        vDatos[1] = "Facturas\\CORPORATIVOS\\" + vPDF; //adjuntos
                        vDatos[2] = "Hector.Valerio";
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.notificarFacturacionALTOS(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");
                    }

                }
            }
            catch (Exception EX)
            {
                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);
            }

        }

        private void barButtonItem39_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            string vQueryDetalleIrregularidad = "[EEHAviso_Masivo_General] 25";
            DataTable vDatosDetalleIrregularidad = vConexion.obtenerDataTable(vQueryDetalleIrregularidad);

            try
            {

               if (vDatosDetalleIrregularidad.Rows.Count > 0)
               for (int i = 0; i < vDatosDetalleIrregularidad.Rows.Count; i++)
                  {
                   string vClave = vDatosDetalleIrregularidad.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                   string Nombre = vDatosDetalleIrregularidad.Rows[i]["m_nombre_abonado"].ToString();
                          Nombre = Nombre.Replace('/', ' ');
                          Nombre = Nombre.Replace('|', ' ');
                          Nombre = Nombre.Replace('"', ' ');
                          Nombre = Nombre.Replace('\'', ' ');
                          Nombre = Nombre.Replace(':', ' ');
                   string Liquidacion = vDatosDetalleIrregularidad.Rows[i]["id_liquidacion"].ToString();
                   string SectorEEH = vDatosDetalleIrregularidad.Rows[i]["SECTOR_ID"].ToString();
                   string VSector = vDatosDetalleIrregularidad.Rows[i]["SECTOR_EEH"].ToString();
                   string VOs = vDatosDetalleIrregularidad.Rows[i]["Os"].ToString();
               

                string vPath = @"\\192.168.100.8\centralizada\Irregularidad\" + vPeriodo + "\\" + VSector + "\\{0}";
                // string vPath = @"C:\facturas\\Irregularidad\\" + vPeriodo +"\\" + VSector + "\\{0}";
                //\\192.168.100.8\Centralizada\IRREGULARIDAD\2007\COMAYAGUA\20200703
                vPath = string.Format(vPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                if (!System.IO.Directory.Exists(vPath))
                    System.IO.Directory.CreateDirectory(vPath);

                string vPathn = @"\\192.168.100.59\e\f\irregularidades\adjuntos\";
                if (!System.IO.Directory.Exists(vPathn))
                    System.IO.Directory.CreateDirectory(vPathn);
                         
                    string vPathDocumentoGGI = vPath + SectorEEH + "_" + Liquidacion + "_" + vClave + "_" + Nombre + ".pdf";
                    string vPathDocumentoIR = vPathn + "FECN" + "_" + vClave + "_" + Liquidacion + ".pdf";
                    FacturasEEHIrregularidad Facturasirregularidad = new FacturasEEHIrregularidad();
                    Facturasirregularidad.Parameters["obtener_todos"].Value = 1;
                    Facturasirregularidad.Parameters["clave_primaria"].Value = Liquidacion;
                    Facturasirregularidad.CreateDocument();
                    Facturasirregularidad.ExportToPdf(vPathDocumentoGGI);
                    Facturasirregularidad.ExportToPdf(vPathDocumentoIR);
                    Facturasirregularidad.Dispose();
                    String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 26," + Liquidacion;
                    vConexion.obtenerDataTable(vQuerDetalleMasivo);
                        Object[] vDatos = new object[40];
                        vDatos[0] = VOs;
                        vDatos[1] = Liquidacion;
                        vDatos[2] = "FECN" + "_" + vClave + "_" + Liquidacion + ".pdf";
                        vDatos[3] = 54;
                        vDatos[4] = ".pdf";
                        vDatos[5] = 0;
                        vDatos[6] = 0;
                        vDatos[7] = "FACTURA ECNF";
                        vDatos[8] = null;
                        vDatos[9] = "appsoe";
                        vDatos[10] = 1;
                        vDatos[11] = 0;
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.vRegistrarFactura(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vClave + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");
                    }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Sucedió un error." + ex   );
            }
           //GENERA TODO LOS GC de Irregularidad 
           try
           {
                String vClavesIrregularidad = "[EEHAltos_Consumidores_Generales] 8";
                DataTable vClavesnuevoirregularidad = vConexion.obtenerDataTable(vClavesIrregularidad);
                string vAgrupa1 = string.Empty;
                string vNombreIrregularidad = string.Empty;
                vNombreIrregularidad = vNombreIrregularidad.Replace('/', ' ');
                vNombreIrregularidad = vNombreIrregularidad.Replace('|', ' ');
                vNombreIrregularidad = vNombreIrregularidad.Replace('"', ' ');
                vNombreIrregularidad = vNombreIrregularidad.Replace('\'', ' ');
                vNombreIrregularidad = vNombreIrregularidad.Replace(':', ' ');
                for (int i = 0; i < vClavesnuevoirregularidad.Rows.Count; i++)
                {
                    if (vClavesnuevoirregularidad.Rows.Count > 0) //&& i < 5)
                    {                       
                       string targetPathirre = @"\\192.168.100.8\facturas\IRREGULARIDAD\" + vPeriodo + "\\{0}";
                        targetPathirre = string.Format(targetPathirre, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                            if (!System.IO.Directory.Exists(targetPathirre))
                                System.IO.Directory.CreateDirectory(targetPathirre);
                            string vCodigoAgrupacionir1 = vClavesnuevoirregularidad.Rows[i]["CodAgrupacion"].ToString();
                            string vQueryirregularidad = "[EEHAltos_Consumidores_Generales] 12,'" + vCodigoAgrupacionir1 + "'";
                            DataTable vDatosIrregularidad = vConexion.obtenerDataTable(vQueryirregularidad);
                            if (vDatosIrregularidad.Rows.Count > 0)
                            {
                             vAgrupa1 = vClavesnuevoirregularidad.Rows[i]["CodAgrupacion"].ToString().PadLeft(4, '0');
                             vNombreIrregularidad = vClavesnuevoirregularidad.Rows[i]["NomIns"].ToString().Trim();
                             string Liquidacion = vClavesnuevoirregularidad.Rows[i]["id_liquidacion"].ToString();
                             vNombreIrregularidad = vNombreIrregularidad.Replace('/', ' ');
                             vNombreIrregularidad = vNombreIrregularidad.Replace('|', ' ');
                             vNombreIrregularidad = vNombreIrregularidad.Replace('"', ' ');
                             vNombreIrregularidad = vNombreIrregularidad.Replace('\'', ' ');
                             vNombreIrregularidad = vNombreIrregularidad.Replace(':', ' ');
                             string vPathDocumentoGG = targetPathirre + vAgrupa1  + "_" + vNombreIrregularidad + ".pdf";
                             EEHFacturaIrregularidadAgrupa Facturasirregularidad = new EEHFacturaIrregularidadAgrupa();
                             Facturasirregularidad.Parameters["obtener_todos"].Value = 3;
                             Facturasirregularidad.Parameters["ID_Liquidacion"].Value = 1;
                             Facturasirregularidad.Parameters["codigoAgrupa"].Value = vAgrupa1;
                             Facturasirregularidad.ExportToPdf(vPathDocumentoGG);
                             Facturasirregularidad.Dispose();
                             String vQuerDetalleIrregularidad = "[EEHAltos_Consumidores_Generales] 13," + vAgrupa1;
                             vConexion.obtenerDataTable(vQuerDetalleIrregularidad);
                            }
 
                     }
                }
                if (vClavesnuevoirregularidad.Rows.Count > 0) //
                {
                try
                {
                  vPeriodo = generarMesFacturacionNew(0);
                  string[] filePaths1irregularidad = Directory.GetFiles(@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Envio_Irregularidad\\");
                  foreach (string filePath1 in filePaths1irregularidad)
                  File.Delete(filePath1);
                  //copia facturas de irregularidades que tienen correo en 100.8 facturas
                   string fuenteirregularidad = @"\\192.168.100.8\facturas\IRREGULARIDAD\" + vPeriodo + "\\{0}";
                   fuenteirregularidad = string.Format(fuenteirregularidad, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                   string destino = (@"\\192.168.100.59\\e\\ArchivosAdjuntos\\Envio_Irregularidad\\");
                   DirectoryInfo dl = new DirectoryInfo(fuenteirregularidad);
                   if (File.Exists(fuenteirregularidad))
                   {
                       File.Copy(fuenteirregularidad, destino, true);
                   }
                   destino = (@"\\192.168.100.59\e\ArchivosAdjuntos\Envio_Irregularidad\");
                   FileInfo[] directorios = null;
                   directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                   string rutaExtendida = "";
                   foreach (FileInfo docs in directorios)
                   {
                    rutaExtendida = docs.DirectoryName.Replace(fuenteirregularidad, "");
                    if (!Directory.Exists(destino + rutaExtendida))
                         Directory.CreateDirectory(destino);
                         File.Copy(docs.FullName, destino + "\\" + docs.Name, true);
                   }
                 }
                 catch (Exception ex)
                 {
                 MessageBox.Show("Sucedió un error." + ex);
                 }
                }
            }
            catch (Exception ex)
           {
            MessageBox.Show("Sucedió un error." + ex);
           }
        }


     

            private void barButtonItem40_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQueryMS1 = "[EEH_Masivos_Generales_Correo] 1";
                DataTable vDatosCorreoMS = vConexion.obtenerDataTable(vQueryMS1);
                for (int i = 0; i < vDatosCorreoMS.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vClaveEEHMS = vDatosCorreoMS.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreoMS.Rows[i]["m_nombre_abonado"].ToString().Trim();
                    vCODIGOERROR = vClaveEEHMS;
                    vPDF = vClaveEEHMS + "_" + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreoMS.Rows[i]["Clave"].ToString();
                    vDatos[1] = "Reparto_Correo\\" + vPDF; //adjuntos
                    vDatos[2] = "wilvert.dubon";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionMS(ref vCodigoResult, ref vMensajeResult, vDatos);
                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vClaveEEHMS + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");
                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);
            }

        }

        private void barButtonItem42_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void barButtonItem43_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void barButtonItem41_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void barButtonItem44_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {
                Conexion vConexion = new Conexion();
                String vQueryIrregularidadCorreo = "[EEH_Masivos_Generales_Correo] 2";
                DataTable vDatosCorreoI = vConexion.obtenerDataTable(vQueryIrregularidadCorreo);
                for (int i = 0; i < vDatosCorreoI.Rows.Count; i++)
                {
                        string vPDF = "";
                        string vClaveEEHIrregularidad = vDatosCorreoI.Rows[i]["Codagrupacion"].ToString().PadLeft(4, '0');
                        string vNombreInstitucionIrregularidad = vDatosCorreoI.Rows[i]["NomIns"].ToString().Trim();
                        vCODIGOERROR = vClaveEEHIrregularidad;
                        vPDF = vClaveEEHIrregularidad + "_" + vNombreInstitucionIrregularidad + ".pdf";
                        Object[] vDatos = new object[3];
                        vDatos[0] = vDatosCorreoI.Rows[i]["Codagrupacion"].ToString();
                        vDatos[1] = "Envio_Irregularidad\\" + vPDF; //adjuntos
                        vDatos[2] = "Celvin.Diaz";
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.notificarIrregularidad(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vClaveEEHIrregularidad + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");
                }
            }
            catch (Exception EX)
            {

                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);
            }



        }

        private void barButtonItem45_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

        }

        private void barButtonItem46_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Conexion vConexion = new Conexion();
            string vPeriodo = generarMesFacturacionNew(0);
            try
            {

                string[] filePaths1 = Directory.GetFiles(@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\GRANDECLIENTES");
                foreach (string filePath1 in filePaths1)
                    File.Delete(filePath1);

                //if (!System.IO.Directory.Exists(filePaths1))
                //    System.IO.Directory.CreateDirectory(filePaths1);

                //copia facturas de altos consumidores en 100.8 facturas
                string fuente = @"C:\Facturas\ALTOS_CONSUMIDORES\GRANDESCLIENTES\CORREO";
                string destino = (@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\GRANDECLIENTES");
                DirectoryInfo dl = new DirectoryInfo(fuente);

                if (!System.IO.Directory.Exists(destino))
                    System.IO.Directory.CreateDirectory(destino);
                if (File.Exists(fuente))
                {
                    File.Copy(fuente, destino, true);
                }
                fuente = @"C:\Facturas\\ALTOS_CONSUMIDORES\\GRANDESCLIENTES\\CORREO";
                destino = (@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\GRANDECLIENTES");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);

                string rutaExtendida = "";
                foreach (FileInfo docs in directorios)
                {
                    // FileAttributes at = File.GetAttributes(docs.DirectoryName);
                    rutaExtendida = docs.DirectoryName.Replace(fuente, "");
                    //if (at.HasFlag(FileAttributes.Directory)){
                    if (!Directory.Exists(destino + rutaExtendida))
                        Directory.CreateDirectory(destino);
                    //}
                    File.Copy(docs.FullName, destino + "\\" + docs.Name, true);
                }

            }
            catch (Exception EX)
            {

                throw;
            }
            try
            {
                string[] filePaths2 = Directory.GetFiles(@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\CORPORATIVOS");
                foreach (string filePath2 in filePaths2)
                    File.Delete(filePath2);


                //copia facturas de altos consumidores en 100.8 facturas
                string fuente1 = @"C:\Facturas\ALTOS_CONSUMIDORES\CORPORATIVOS\CORREO";
                string destino1 = (@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\CORPORATIVOS");
                DirectoryInfo dl = new DirectoryInfo(fuente1);

                if (File.Exists(fuente1))
                {
                    File.Copy(fuente1, destino1, true);
                }
                fuente1 = @"C:\Facturas\\ALTOS_CONSUMIDORES\\CORPORATIVOS\\CORREO";
                destino1 = (@"\\192.168.100.59\e\ArchivosAdjuntos\ALTOS_CONSUMIDORES\" + vPeriodo + "\\CORPORATIVOS");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);

                string rutaExtendida = "";
                foreach (FileInfo docs in directorios)
                {
                    // FileAttributes at = File.GetAttributes(docs.DirectoryName);
                    rutaExtendida = docs.DirectoryName.Replace(fuente1, "");
                    //if (at.HasFlag(FileAttributes.Directory)){
                    if (!Directory.Exists(destino1 + rutaExtendida))
                        Directory.CreateDirectory(destino1);
                    //}
                    File.Copy(docs.FullName, destino1 + "\\" + docs.Name, true);
                }

            }
            catch (Exception)
            {

                throw;
            }

        }

        private void barButtonItem47_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {

            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            Boolean vExistePeriodo = false;
            int rango = 0;
            String vClaves1 = "[EEH_Gobierno_Generales] 1";
            DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);
 
            string mensual = @"\\192.168.100.59\e\ArchivosAdjuntos\GOBIERNO\" + vPeriodo + "\\";
             
            string vAgrupa1 = string.Empty;
            string vNombreInstitucion1 = string.Empty;
            string targetPath = @"C:\Facturas\Gobierno\" + vPeriodo + "\\{0}";
            targetPath = string.Format(targetPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");

            //string mensual = vDireccion + vPeriodo + "\\";

            if (!System.IO.Directory.Exists(mensual))
                System.IO.Directory.CreateDirectory(mensual);


            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);

            //Elimina las facturas de ciclo anteriores.
            string[] filePaths1 = Directory.GetFiles(mensual + "\\");
            foreach (string filePath1 in filePaths1)
                File.Delete(filePath1);

            for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
            {
                if (vClavesnuevo1.Rows.Count > 0) //&& i < 5)
                {
                    string vCodigoAgrupacion1 = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                    string vQueryDetalle1 = "[EEH_Gobierno_Generales] 10,'" + vCodigoAgrupacion1 + "'";

                    DataTable vDatosDetalle1 = vConexion.obtenerDataTable(vQueryDetalle1);

                    string vQuer1 = "[EEH_Gobierno_Generales] 2," + vCodigoAgrupacion1;
                    DataTable VNUMEROSUMAR = vConexion.obtenerDataTable(vQuer1);
                    int myNum = int.Parse(VNUMEROSUMAR.Rows[0][0].ToString());

                    int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                    int vContador1 = vContador + myNum + 1;
                    //Funcional
                    if (vDatosDetalle1.Rows.Count > 0)
                    {

                        if (vDatosDetalle1.Rows.Count >= 1000)
                        {
                            for (int j = 0; j < 5; j++)
                            {
                                string vValida1 = "[EEH_Gobierno_Generales] 13,'" + vCodigoAgrupacion1 + "'";

                                DataTable vDatosValida11 = vConexion.obtenerDataTable(vValida1);


                                if (vDatosValida11.Rows.Count > 0)
                                {
                                    string vAgrupa = string.Empty;
                                    string vNombreInstitucion = string.Empty;
                                    vAgrupa = vDatosValida11.Rows[0]["codAgrupacion"].ToString().PadLeft(4, '0');
                                    vNombreInstitucion = vDatosValida11.Rows[0]["NomIns"].ToString().Trim();
                                    vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                                    vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                                    vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                                    vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                                    vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                                    string vPathDocumentoGG = targetPath + vAgrupa + "_" + vNombreInstitucion + rango + ".pdf";
                                    //string vPathDocumentoGB = mensual + vAgrupa + "_" + vNombreInstitucion + ".pdf";

                                    EEHFacturaGobierno FacturaGobiernoDial = new EEHFacturaGobierno();
                                    FacturaGobiernoDial.Parameters["Tipo"].Value = 7;
                                    FacturaGobiernoDial.Parameters["clave"].Value = vAgrupa;
                                    FacturaGobiernoDial.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                                    FacturaGobiernoDial.CreateDocument();
                                    FacturaGobiernoDial.ExportToPdf(vPathDocumentoGG);
                                    //FacturaGobiernoDial.ExportToPdf(vPathDocumentoGB);
                                    FacturaGobiernoDial.Dispose();
                                    String vQuerDetalleMasivo = "[EEH_Gobierno_Generales] 3," + vAgrupa1;
                                    vConexion.obtenerDataTable(vQuerDetalleMasivo);
                                    string vQueryFacturas = "[EEHAviso_Gob_Ciclo_Actual_D] " + 0 + "," + vPeriodo + "," + vAgrupa + "," + 5;
                                    vQueryFacturas = String.Format(vQueryFacturas, vAgrupa1);
                                    DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                                    string vClavesFacturadas = string.Empty;
                                    if (vDatosFacturas.Rows.Count > 0)
                                    {
                                        for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                                        {
                                            vClavesFacturadas += vDatosFacturas.Rows[x]["m_clave_primaria"].ToString();

                                            String vQueryClave = "[EEH_Gobierno_Generales] 11," + vClavesFacturadas;
                                            vConexion.obtenerDataTable(vQueryClave);
                                            vClavesFacturadas = string.Empty;

                                        }

                                    }

                                    rango++;

                                    if (vExistePeriodo)
                                    {
                                        string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                        vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContador, vContador1, vAgrupa1);
                                        DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                                    }
                                }

                            }

                        }
                        else
                        {

                            vAgrupa1 = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                            vNombreInstitucion1 = vClavesnuevo1.Rows[i]["NomIns"].ToString().Trim();
                            vNombreInstitucion1 = vNombreInstitucion1.Replace('/', ' ');
                            vNombreInstitucion1 = vNombreInstitucion1.Replace('|', ' ');
                            vNombreInstitucion1 = vNombreInstitucion1.Replace('"', ' ');
                            vNombreInstitucion1 = vNombreInstitucion1.Replace('\'', ' ');
                            vNombreInstitucion1 = vNombreInstitucion1.Replace(':', ' ');
                            string vPathDocumentoGG = targetPath + vAgrupa1 + "_" + vNombreInstitucion1 + ".pdf";
                            string vPathDocumentoGB = mensual + vAgrupa1 + "_" + vNombreInstitucion1 + ".pdf";


                            EEHFacturaGobierno FacturaGobiernoDial = new EEHFacturaGobierno();
                            FacturaGobiernoDial.Parameters["Tipo"].Value = 7;
                            FacturaGobiernoDial.Parameters["clave"].Value = vAgrupa1;
                            FacturaGobiernoDial.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                            FacturaGobiernoDial.CreateDocument();
                            FacturaGobiernoDial.ExportToPdf(vPathDocumentoGG);
                            FacturaGobiernoDial.ExportToPdf(vPathDocumentoGB);
                            FacturaGobiernoDial.Dispose();
                            String vQuerDetalleMasivo = "[EEH_Gobierno_Generales] 3," + vAgrupa1;
                           vConexion.obtenerDataTable(vQuerDetalleMasivo);

                            if (vExistePeriodo)
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContador, vContador1, vAgrupa1);
                               DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }

                        }
 
                    }
 
                }

            }
        }

        private void barButtonItem48_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            //vPeriodo = "2004";
            string vNombreInstitucion1 = string.Empty;
            Conexion vConexion = new Conexion();

            //String vClaves1 = "[EEH_Gobierno_Generales] 6";
            //DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);

            String vClaves1 = "[EEHGobierno_Generales_Correo]";
            DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);

            string targetPath = @"\192.168.100.59\e\ArchivosAdjuntos\GOBIERNOESTADO\" + vPeriodo + "\\";
            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);


            string mensual = @"C:\facturas\EstadoCuenta\" + vPeriodo + "\\";
            if (!System.IO.Directory.Exists(mensual))
                System.IO.Directory.CreateDirectory(mensual);

            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);

            if (!System.IO.Directory.Exists(mensual))
                System.IO.Directory.CreateDirectory(mensual);


            //Elimina las facturas de ciclo anteriores.
            string[] filePaths1 = Directory.GetFiles(targetPath + "\\");
            foreach (string filePath1 in filePaths1)
                File.Delete(filePath1);



            for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
            {
                string vCodigoAgrupacion1 = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();



                vNombreInstitucion1 = vClavesnuevo1.Rows[i]["NomIns"].ToString().Trim();
                vNombreInstitucion1 = vNombreInstitucion1.Replace('/', ' ');
                vNombreInstitucion1 = vNombreInstitucion1.Replace('|', ' ');
                vNombreInstitucion1 = vNombreInstitucion1.Replace('"', ' ');
                vNombreInstitucion1 = vNombreInstitucion1.Replace('\'', ' ');
                vNombreInstitucion1 = vNombreInstitucion1.Replace(':', ' ');

                string path = mensual + vCodigoAgrupacion1 + "_" + vNombreInstitucion1 + " ESTADO_CUENTA" + ".pdf";
                string paths = targetPath + vCodigoAgrupacion1 + "_" + vNombreInstitucion1 + " ESTADO_CUENTA" + ".pdf";
                FacturaAgrupacionHorizontal Facturas3 = new FacturaAgrupacionHorizontal();
                Facturas3.Parameters["codigoAgrupa"].Value = vCodigoAgrupacion1;
                Facturas3.CreateDocument();
                Facturas3.ExportToPdf(path);
                //Facturas3.ExportToPdf(paths);
                Facturas3.Dispose();

            }

        }

        private void barButtonItem49_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);


            try
            {

                Conexion vConexion = new Conexion();
                String vQuery1 = "[EEH_Gobierno_Generales] 5";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery1);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)

                {

                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                    vDatos[1] = "GOBIERNO\\" + vPeriodo + "\\" + vPDF; //adjuntos
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionGobiernoDial(ref vCodigoResult, ref vMensajeResult, vDatos);
                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");


                }



            }
            catch (Exception EX)
            {
                Console.WriteLine("=========================================      " + vCODIGOERROR + "    =============ERROR=========================================================");
                Console.Write(EX.Message);
            }


        }

        private void barButtonItem50_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            try
            {
                Conexion vConexion = new Conexion();
                String vQuery = "[EEHGobierno_Generales_Correo]";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                string vPeriodo = generarMesFacturacionNew(0);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";  
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + " ESTADO_CUENTA" + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["codAgrupacion"].ToString();
                    vDatos[1] = "GOBIERNOESTADO\\" + vPeriodo + "\\" + vPDF;
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionE(ref vCodigoResult, ref vMensajeResult, vDatos);

                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");


                }
            }
            catch (Exception EX)
            {

                throw;
            }

        }

        private void barButtonItem51_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
            string vPeriodo = generarMesFacturacionNew(0);
            string var = TxMasivo.Text.Trim();
            if (var != string.Empty)
            {

                string vQuery = "[EEHAviso_Gobierno_Generales] 8," + var;
                Conexion vConexion = new Conexion();
                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);

                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + vPeriodo;

                        string vPathMasivo = @"C:\\facturas\\Masiva\\";

                        if (!System.IO.Directory.Exists(vPathMasivo))
                            System.IO.Directory.CreateDirectory(vPathMasivo);

                        string prefijo = vDatosMesActual.Rows[i]["m_clave_primaria"].ToString();
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                        try
                        {
                            EEHFacturaMesActual FacturaEspecial = new EEHFacturaMesActual();
                            FacturaEspecial.Parameters["tipo"].Value = 1;
                            FacturaEspecial.Parameters["clave_primaria"].Value = clave;
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\Masiva\\" + prefijo + "_" + "_" + vNombreInstitucion + "_" + "1" + ".pdf");
                            FacturaEspecial.Dispose();
                        }
                        catch (Exception Ex)
                        {
                            Console.WriteLine(Ex.Message);
                        }
                    }
                }


            }

        }

        private void barButtonItem52_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
            string vPeriodo = generarMesFacturacionNew(0);
            string var = TxMasivo.Text.Trim();
            if (var != string.Empty)
            {
                string vPathn = @"C:\\facturas\\FACTURA_MES_ACTUAL\\";
                if (!System.IO.Directory.Exists(vPathn))
                    System.IO.Directory.CreateDirectory(vPathn);
                string vQuery = "[EEHAviso_Gobierno_Generales] 8," + var;
                Conexion vConexion = new Conexion();
                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);

                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + vPeriodo;

                        string vPathMasivo = @"C:\\facturas\\Masiva\\";

                        if (!System.IO.Directory.Exists(vPathMasivo))
                            System.IO.Directory.CreateDirectory(vPathMasivo);

                        string prefijo = vDatosMesActual.Rows[i]["m_clave_primaria"].ToString();
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                        try
                        {
                            FacturaMasivaEEHanterior FacturaEspecial = new FacturaMasivaEEHanterior();
                            FacturaEspecial.Parameters["tipo"].Value = 2;
                            FacturaEspecial.Parameters["clave_primaria"].Value = clave;
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\Masiva\\" + prefijo + "_" + "_" + vNombreInstitucion + "_" + "_2" + ".pdf");
                            FacturaEspecial.Dispose();


                        }
                        catch (Exception Ex)
                        {
                            Console.WriteLine(Ex.Message);
                        }
                    }
                }


            }
        }

        private void barButtonItem53_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
            string vPeriodo = generarMesFacturacionNew(0);
            string var = TxMasivo.Text.Trim();
            if (var != string.Empty)
            {
                string vPathn = @"C:\\facturas\\FACTURA_MES_ACTUAL\\";
                if (!System.IO.Directory.Exists(vPathn))
                    System.IO.Directory.CreateDirectory(vPathn);
                string vQuery = "[EEHAviso_Gobierno_Generales] 8," + var;
                Conexion vConexion = new Conexion();
                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);

                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + vPeriodo;

                        string vPathMasivo = @"C:\\facturas\\Masiva\\";

                        if (!System.IO.Directory.Exists(vPathMasivo))
                            System.IO.Directory.CreateDirectory(vPathMasivo);

                        string prefijo = vDatosMesActual.Rows[i]["m_clave_primaria"].ToString();
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                        try
                        {
                            FacturaEEHtercermes FacturaEspecial = new FacturaEEHtercermes();
                            FacturaEspecial.Parameters["tipo"].Value = 3;
                            FacturaEspecial.Parameters["clave_primaria"].Value = clave;
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\Masiva\\" + prefijo + "_" + "_" + vNombreInstitucion + "_" + "_3" + ".pdf");
                            FacturaEspecial.Dispose();
                        }
                        catch (Exception Ex)
                        {
                            Console.WriteLine(Ex.Message);
                        }
                    }
                }


            }
        }

        private void ribbonControl1_Click(object sender, EventArgs e)
        {

        }

        private void labelControl4_Click(object sender, EventArgs e)
        {

        }

        private void barButtonItem54_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();




            string var = TxIrregularidad.Text.Trim();
            if (var != string.Empty)

                try

                {

                    string vQueryDetalle1 = "[EEHAviso_Masivo_General] 28" + "," + var;
                    DataTable vDatosDetalle1 = vConexion.obtenerDataTable(vQueryDetalle1);

                    if (vDatosDetalle1.Rows.Count > 0)
                        for (int i = 0; i < vDatosDetalle1.Rows.Count; i++)
                        {
                            string vClave = var;
                            string Nombre = vDatosDetalle1.Rows[i]["m_nombre_abonado"].ToString();
                            string Liquidacion = vDatosDetalle1.Rows[i]["id_liquidacion"].ToString();
                            string SectorEEH = vDatosDetalle1.Rows[i]["SECTOR_ID"].ToString();
                            string VSector = vDatosDetalle1.Rows[i]["SECTOR_EEH"].ToString();
                            string VOs = vDatosDetalle1.Rows[i]["Os"].ToString();

                            //   string vPath = @"\\192.168.100.8\\centralizada\\Irregularidad\\PRUEBAS" + vPeriodo + "\\" + VSector + "\\{0}";
                            string vPath = @"C:\facturas\Irregularidad\" + vPeriodo + "\\" + VSector + "\\{0}";
                            vPath = string.Format(vPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                            if (!System.IO.Directory.Exists(vPath))
                                System.IO.Directory.CreateDirectory(vPath);

                            string vPathDocumentoGG = vPath + SectorEEH + "_" + Liquidacion + "_" + vClave + "_" + Nombre + ".pdf";
                            FacturasEEHIrregularidad FacturaIrregularidad = new FacturasEEHIrregularidad();
                            FacturaIrregularidad.Parameters["obtener_todos"].Value = 2;
                      
                            FacturaIrregularidad.Parameters["clave_primaria"].Value = Liquidacion;
                            FacturaIrregularidad.CreateDocument();
                            FacturaIrregularidad.ExportToPdf(vPathDocumentoGG);
                            FacturaIrregularidad.Dispose();

                        }
                }
                catch (Exception ex)
                {

                    throw;
                }
        }

        private void barButtonItem55_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            String vRemesas = "[EEHAviso_Masivo_General]40";
            DataTable vRemesasIrregularidad = vConexion.obtenerDataTable(vRemesas);
            string targetPath = (@"\\192.168.100.8\centralizada\REMESAS_IRREGULARIDAD\" + vPeriodo  + "\\{0}\\");
                   targetPath = string.Format(targetPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
            if (!System.IO.Directory.Exists(targetPath))
                System.IO.Directory.CreateDirectory(targetPath);
            for (int i = 0; i < vRemesasIrregularidad.Rows.Count; i++)
            {
                if (vRemesasIrregularidad.Rows.Count > 0) //&& i < 5)
                {
                string vRemesasAgrupa = vRemesasIrregularidad.Rows[i]["num_remersas"].ToString();
                string vQueryRemesasDetalle = "[EEHAviso_Masivo_General]39,'" + vRemesasAgrupa + "'";
                DataTable vQueryDetalleRemesas = vConexion.obtenerDataTable(vQueryRemesasDetalle);
                if (vQueryDetalleRemesas.Rows.Count > 0)
                {
                    string vPathDocumentoRemesa = targetPath + vRemesasAgrupa  + ".pdf";
                    FacturasEEHIrregularidadReserva facturasIrregularidadMasivo = new FacturasEEHIrregularidadReserva();
                    facturasIrregularidadMasivo.Parameters["obtener_todos"].Value = 4;
                    facturasIrregularidadMasivo.Parameters["ID_Liquidacion"].Value = 1;
                    facturasIrregularidadMasivo.Parameters["clave_primaria"].Value = vRemesasAgrupa;
                    facturasIrregularidadMasivo.CreateDocument();
                    facturasIrregularidadMasivo.ExportToPdf(vPathDocumentoRemesa);
                    facturasIrregularidadMasivo.Dispose();
                    String vQuerDetalleIrregularidad = "[EEHAviso_Masivo_General]41," + vRemesasAgrupa;
                    vConexion.obtenerDataTable(vQuerDetalleIrregularidad);
                    String vQuerDetallePath = "[EEHAviso_Masivo_General]42," + "'" + vPathDocumentoRemesa + "'" + "," + vRemesasAgrupa;
                    vConexion.obtenerDataTable(vQuerDetallePath);

                    }
                }
            }
        }

        private void barButtonItem56_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            string vQueryRemesaIrregularidad = "[EEHAviso_Masivo_General] 43";
            DataTable vDetalleFactIrregularidad = vConexion.obtenerDataTable(vQueryRemesaIrregularidad);
            try
            {
                if (vDetalleFactIrregularidad.Rows.Count > 0)
                    for (int i = 0; i < vDetalleFactIrregularidad.Rows.Count; i++)
                    {
                        string vClave = vDetalleFactIrregularidad.Rows[i]["Clave"].ToString().PadLeft(4, '0');
                        string Nombre = vDetalleFactIrregularidad.Rows[i]["m_nombre_abonado"].ToString().Trim();
                        Nombre = Nombre.Replace('/', ' ');
                        Nombre = Nombre.Replace('|', ' ');
                        Nombre = Nombre.Replace('"', ' ');
                        Nombre = Nombre.Replace('\'', ' ');
                        Nombre = Nombre.Replace(':', ' ');
                        string Liquidacion = vDetalleFactIrregularidad.Rows[i]["id_liquidacion"].ToString();
                        string SectorEEH = vDetalleFactIrregularidad.Rows[i]["SECTOR_ID"].ToString();
                        string VSector = vDetalleFactIrregularidad.Rows[i]["SECTOR_EEH"].ToString();
                        string VOs = vDetalleFactIrregularidad.Rows[i]["Os"].ToString();
                        string vPathremesa = @"\\192.168.100.8\centralizada\Irregularidad\" + vPeriodo + "\\" + VSector + "\\{0}";
                               vPathremesa = string.Format(vPathremesa, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                        if (!System.IO.Directory.Exists(vPathremesa))
                             System.IO.Directory.CreateDirectory(vPathremesa);
                        string vPathn = @"\\192.168.100.59\\f\\irregularidades\\adjuntos\\";
                        if (!System.IO.Directory.Exists(vPathn))
                             System.IO.Directory.CreateDirectory(vPathn);
                        string vPathDocumentoGGI = vPathremesa + SectorEEH + "_" + Liquidacion + "_" + vClave + "_" + Nombre + ".pdf";
                        string vPathDocumentoIRRemesas = vPathn + "FECN" + "_" + vClave + "_" + Liquidacion + ".pdf";
                        FacturaIrregularidadRemesas FacturasRemesasirregularidad = new FacturaIrregularidadRemesas();
                        FacturasRemesasirregularidad.Parameters["obtener_todos"].Value = 5;
                        FacturasRemesasirregularidad.Parameters["clave_primaria"].Value = Liquidacion;
                        FacturasRemesasirregularidad.CreateDocument();
                        FacturasRemesasirregularidad.ExportToPdf(vPathDocumentoGGI);
                        FacturasRemesasirregularidad.ExportToPdf(vPathDocumentoIRRemesas);
                        FacturasRemesasirregularidad.Dispose();
                        String vQuerDetalleMasivoRemesa = "[EEHAviso_Masivo_General] 44," + Liquidacion;
                        vConexion.obtenerDataTable(vQuerDetalleMasivoRemesa);
                        Object[] vDatos = new object[40];
                        vDatos[0] = VOs;
                        vDatos[1] = Liquidacion;
                        vDatos[2] = "FECN" + "_" + vClave + "_" + Liquidacion + ".pdf";
                        vDatos[3] = 54;
                        vDatos[4] = ".pdf";
                        vDatos[5] = 0;
                        vDatos[6] = 0;
                        vDatos[7] = "FACTURA ECNF";
                        vDatos[8] = null;
                        vDatos[9] = "appsoe";
                        vDatos[10] = 1;
                        vDatos[11] = 0;
                        string vCodigoResult = "", vMensajeResult = "";
                        vConexion.vRegistrarFactura(ref vCodigoResult, ref vMensajeResult, vDatos);
                        Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vClave + "             ====================================");
                        Console.WriteLine(vCodigoResult);
                        Console.WriteLine(vMensajeResult);
                        Console.WriteLine("===============================================================================================================");

                    }
               
            }
            catch (Exception Ex)
            {

                Console.WriteLine(Ex.Message);
                genericos.Log("FACTURAS ALTOS CONSUMIODRES QUE SE ENTREGAN POR REPARTO ", Ex.Message, "");
            }


        }

        private void barButtonItem15_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            Boolean vExistePeriodo1 = false;
            string vPathnGA = @"\\192.168.100.8\centralizada\GOBIERNO\" + vPeriodo + "\\{0}";



            string vPathnG = @"\\192.168.100.8\Facturas\Facturas\GOBIERNO\" + vPeriodo + "\\{0}";
            vPathnG = string.Format(vPathnG, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(vPathnG))
                System.IO.Directory.CreateDirectory(vPathnG);


            vPathnGA = string.Format(vPathnGA, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(vPathnGA))
                System.IO.Directory.CreateDirectory(vPathnGA);
             
            string periodoFacturacionGA = generarMesFacturacionNew(0);
            String vClavesGA = "[EEH_Gobierno_Generales] 15";
            DataTable vClavesnuevoGA = vConexion.obtenerDataTable(vClavesGA);
            if (vClavesnuevoGA.Rows.Count > 0)
            {
                for (int i = 0; i < vClavesnuevoGA.Rows.Count; i++)
                {
                    string prefijoGA = "";
                    string clave = "";
                    string vNombreInstitucionGA = "";
                    string VcodigoAgrupacion = "";
                    VcodigoAgrupacion = "[EEH_Gobierno_Generales] 16," + vClavesnuevoGA.Rows[i]["codAgrupacion"].ToString();
                    DataTable vAgrupacion = vConexion.obtenerDataTable(VcodigoAgrupacion);
                    if (vAgrupacion.Rows.Count > 0)
                    {

                        prefijoGA = vClavesnuevoGA.Rows[i]["codAgrupacion"].ToString();
                        //clave = vAgrupacion.Rows[0]["Clave"].ToString();
                         string vQuerGA = "[EEH_Gobierno_Generales] 17" + vAgrupacion;
                        DataTable VNUMEROSUMAR = vConexion.obtenerDataTable(vQuerGA);
                        int myNum = int.Parse(VNUMEROSUMAR.Rows[0][0].ToString());
                        int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo1);
                        int vContador1 = vContador + myNum + 20;

                      

                        vNombreInstitucionGA = vAgrupacion.Rows[0]["NomIns"].ToString().Trim();
                        vNombreInstitucionGA = vNombreInstitucionGA.Replace('/', ' ');
                        vNombreInstitucionGA = vNombreInstitucionGA.Replace('|', ' ');
                        vNombreInstitucionGA = vNombreInstitucionGA.Replace('"', ' ');
                        vNombreInstitucionGA = vNombreInstitucionGA.Replace('\'', ' ');
                        vNombreInstitucionGA = vNombreInstitucionGA.Replace(':', ' ');
                        string vPathDocumentoG = vPathnGA + prefijoGA + "_" + vNombreInstitucionGA + ".pdf";
                        try
                        {
                            GeneracionDiariaGobierno FacturaEspecialGA = new GeneracionDiariaGobierno();
                            FacturaEspecialGA.Parameters["Tipo"].Value = 7;
                            FacturaEspecialGA.Parameters["mes_facturacion"].Value = periodoFacturacionGA;
                            FacturaEspecialGA.Parameters["clave"].Value = prefijoGA;
                            FacturaEspecialGA.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                            FacturaEspecialGA.CreateDocument();
                            FacturaEspecialGA.ExportToPdf(vPathDocumentoG);
                            FacturaEspecialGA.Dispose();

                            String vQuerDetalleMasivoGA = "[EEHAviso_Masivo_General] 45," + vAgrupacion.Rows[0]["codAgrupacion"].ToString();
                            vConexion.obtenerDataTable(vQuerDetalleMasivoGA);
                            {
                                string vQueryInsertarContador = "[EEHInsert_Fact_Correlativo_Altos] 7, '','','{0}','{1}','{2}','{3}','{4}'"; // utilizar para unica 
                                vQueryInsertarContador = string.Format(vQueryInsertarContador, "Gobierno_diario", generarMesFacturacionNew(0), vContador, vContador1, prefijoGA);
                                DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarContador);
                            }

                            //15.7.2021


                        }
                        catch (Exception Ex)
                        {
                            Console.WriteLine(Ex.Message);
                        }

                   


                    }

                }
             }
            try
            {
                string[] filePaths1GA = Directory.GetFiles(@"\\192.168.100.59\e\ArchivosAdjuntos\Facturas\Gobierno");
                foreach (string filePath1GA in filePaths1GA)
                    File.Delete(filePath1GA);

                string fuenteGA = @"\\192.168.100.8\centralizada\GOBIERNO\" + vPeriodo + "\\{0}";
                       fuenteGA = string.Format(fuenteGA, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                string destinoGA = (@"\\192.168.100.59\e\ArchivosAdjuntos\Facturas\Gobierno\");
                DirectoryInfo dl = new DirectoryInfo(fuenteGA);
                if (File.Exists(fuenteGA))
                {
                    File.Copy(fuenteGA, destinoGA, true);
                }
                fuenteGA = @"\\192.168.100.8\centralizada\GOBIERNO\" + vPeriodo + "\\{0}";
                fuenteGA = string.Format(fuenteGA, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00"));
                destinoGA = (@"\\192.168.100.59\e\ArchivosAdjuntos\Facturas\Gobierno\");
                FileInfo[] directorios = null;
                directorios = dl.GetFiles("*", SearchOption.AllDirectories);
                string rutaExtendida = "";

                foreach (FileInfo docs in directorios)
                {
                    rutaExtendida = docs.DirectoryName.Replace(fuenteGA, "");
                    if (!Directory.Exists(destinoGA + rutaExtendida))
                        Directory.CreateDirectory(destinoGA);
                    File.Copy(docs.FullName, destinoGA + "\\" + docs.Name, true);
                }

            }
            catch (Exception EX)
            {
                Console.WriteLine(EX.Message);
                genericos.Log("FACTURACION ", EX.Message, "");
            }


        }

        private void barButtonItem18_ItemClick_2(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String vCODIGOERROR = "";
            string vPeriodo = generarMesFacturacionNew(0);

            try
            {
                Conexion vConexion = new Conexion();
                String vQuery1GA = "[EEH_Gobierno_Generales] 18";
                DataTable vDatosCorreoGA = vConexion.obtenerDataTable(vQuery1GA);
                for (int i = 0; i < vDatosCorreoGA.Rows.Count; i++)

                {

                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreoGA.Rows[i]["codAgrupacion"].ToString().PadLeft(4, '0');
                    string vNombreInstitucion = vDatosCorreoGA.Rows[i]["NomIns"].ToString().Trim();
                    vCODIGOERROR = vCodigoAgrupacionEEH;
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreoGA.Rows[i]["codAgrupacion"].ToString();
                    vDatos[1] = "Facturas\\GOBIERNO\\" + vPDF; //adjuntos
                    vDatos[2] = "noe.alvarez";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionGobiernoDiaria(ref vCodigoResult, ref vMensajeResult, vDatos);
                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");

                }

            }
            catch (Exception)
            {

                throw;
            }


        }

        private void barButtonItem13_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            // GENERA MASIVO QUE ANTES ERA UN ALTOS CONSUMIDOR
            String vClavesmasivo = "[EEHAltos_Consumidores_Generales] 14";
            DataTable vClavesmasivonuevo = vConexion.obtenerDataTable(vClavesmasivo);
            string vclave = string.Empty;
            string vnombremasivo = string.Empty;
            string pathMasivo = @"\\192.168.100.8\Facturas\Masivo1\" + vPeriodo + "\\{0}";
            pathMasivo = string.Format(pathMasivo, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
            if (!System.IO.Directory.Exists(pathMasivo))
                System.IO.Directory.CreateDirectory(pathMasivo);
            for (int i = 0; i < vClavesmasivonuevo.Rows.Count; i++)
            {
                if (vClavesmasivonuevo.Rows.Count > 0) //&& i < 5)
                {
                    try
                    {
                        Boolean vExistePeriodo = false;
                        string clave = vClavesmasivonuevo.Rows[i]["clave"].ToString();
                        string vQueryDetalleMasivo = "[EEHAltos_Consumidores_Generales] 15,'" + clave + "'";
                        DataTable vDatosmDetalle = vConexion.obtenerDataTable(vQueryDetalleMasivo);

                        if (vDatosmDetalle.Rows.Count > 0)
                        {
                            int vContador = ObtenerCorrelativo(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo);
                            int vContadorPeriodo = vContador;
                            vclave = vClavesmasivonuevo.Rows[i]["clave"].ToString();
                            vnombremasivo = vClavesmasivonuevo.Rows[i]["m_nombre_abonado"].ToString().Trim();
                            vnombremasivo = vnombremasivo.Replace('/', ' ');
                            vnombremasivo = vnombremasivo.Replace('|', ' ');
                            vnombremasivo = vnombremasivo.Replace('"', ' ');
                            vnombremasivo = vnombremasivo.Replace('\'', ' ');
                            vnombremasivo = vnombremasivo.Replace(':', ' ');
                            string vPathDocumentoGG = pathMasivo + vclave + "_" + vnombremasivo + ".pdf";
                            FacturasSagaMasivo facturamasivaAC = new FacturasSagaMasivo();
                            facturamasivaAC.Parameters["tipo"].Value = 4;
                            facturamasivaAC.Parameters["clave_primaria"].Value = clave;
                            facturamasivaAC.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                            facturamasivaAC.CreateDocument();
                            facturamasivaAC.ExportToPdf(vPathDocumentoGG);
                            facturamasivaAC.Dispose();
                            String vQuerDetalleMasivo = "[EEHAltos_Consumidores_Generales] 16," + clave;
                            vConexion.obtenerDataTable(vQuerDetalleMasivo);

                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        genericos.Log("GENERA MASIVO QUE ANTES ERA UN ALTOS CONSUMIDOR", ex.Message, "");
                    }



                }
            }
        }

        private void barButtonItem19_ItemClick_2(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            // ENVIA POR CORREO LAS CUENTAS DE ALTOS CONNSUMIDORES QUE ANTES PERTENCIAN  A MASIVO
            try
            {


                String vQuery = "[EEHAltos_Consumidores_Generales_Mercado] 9";
                DataTable vDatosCorreo = vConexion.obtenerDataTable(vQuery);
                for (int i = 0; i < vDatosCorreo.Rows.Count; i++)
                {
                    string vPDF = "";
                    string vCodigoAgrupacionEEH = vDatosCorreo.Rows[i]["m_clave_primaria"].ToString();
                    string vNombreInstitucion = vDatosCorreo.Rows[i]["NomIns"].ToString().Trim();
                    vPDF = vCodigoAgrupacionEEH + "_" + vNombreInstitucion + ".pdf";
                    Object[] vDatos = new object[3];
                    vDatos[0] = vDatosCorreo.Rows[i]["m_clave_primaria"].ToString();
                    vDatos[1] = "facturas\\MASIVO" + "\\" + vPDF; //adjuntos
                    vDatos[2] = "EEH";
                    string vCodigoResult = "", vMensajeResult = "";
                    vConexion.notificarFacturacionAC(ref vCodigoResult, ref vMensajeResult, vDatos);
                    Console.WriteLine("=======================================   vCodigoAgrupacionEEH    " + vCodigoAgrupacionEEH + "             ====================================");
                    Console.WriteLine(vCodigoResult);
                    Console.WriteLine(vMensajeResult);
                    Console.WriteLine("===============================================================================================================");
                }

            }
            catch (Exception EX)
            {

                Console.WriteLine(EX.Message);
                genericos.Log("FACTURACION ", EX.Message, "");
            }
        }

        private void barButtonItem24_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Conexion vConexion = new Conexion();
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                //DE ESTA MANERA FILTRAMOS TODOS LOS ARCHIVOS EXCEL EN EL NAVEGADOR DE ARCHIVOS
                Filter = "Excel | *.xls;*.xlsx;",

                //AQUÍ INDICAMOS QUE NOMBRE TENDRÁ EL NAVEGADOR DE ARCHIVOS COMO TITULO
                Title = "Seleccionar Archivo"
            };
        

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string vQueryEliminarClaves = "[EEHInsert_Fact_Correlativo_Altos] 9"; // utilizar para unica 
                vQueryEliminarClaves = string.Format(vQueryEliminarClaves);
                DataTable vDatosInsert1 = vConexion.obtenerDataTable(vQueryEliminarClaves);
                dataGridView1.DataSource = ImportarDatos(openFileDialog.FileName);
                 

                for (int fila = 0; fila < dataGridView1.Rows.Count - 1; fila++)
                {
                    
                   
                        string valor = dataGridView1.Rows[fila].Cells["clave"].Value.ToString();
                        string Agrupacion = dataGridView1.Rows[fila].Cells["Agrupacion"].Value.ToString();
                        string ciclo = dataGridView1.Rows[fila].Cells["Ciclo"].Value.ToString();
                        string vQueryInsertarClaves = "[EEHInsert_Fact_Correlativo_Altos] 8,'{0}','{1}','{2}'"; // utilizar para unica 
                        vQueryInsertarClaves = string.Format(vQueryInsertarClaves, valor, Agrupacion, ciclo);
                        DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarClaves);
                  
                }







            }

        }
        DataView ImportarDatos(String nombrearchivo)
        { 
            string conexion = string.Format("Provider = Microsoft.ACE.OLEDB.12.0; Data Source = {0}; Extended properties='Excel 12.0;' ",nombrearchivo);
            OleDbConnection conector = new OleDbConnection(conexion);
            conector.Open();
            OleDbCommand consulta = new OleDbCommand("select * from [Hoja1$]", conector);

            OleDbDataAdapter adapter = new OleDbDataAdapter
            {
                SelectCommand = consulta
            };
            DataSet ds = new DataSet();
            adapter.Fill(ds);
            conector.Close();

            return ds.Tables[0].DefaultView;
        }

        private void barButtonItem30_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Conexion vConexion = new Conexion();
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                //DE ESTA MANERA FILTRAMOS TODOS LOS ARCHIVOS EXCEL EN EL NAVEGADOR DE ARCHIVOS
                Filter = "Excel | *.xls;*.xlsx;",

                //AQUÍ INDICAMOS QUE NOMBRE TENDRÁ EL NAVEGADOR DE ARCHIVOS COMO TITULO
                Title = "Seleccionar Archivo"
            };
            

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                dataGridView1.DataSource = ImportarDatos(openFileDialog.FileName);


                for (int fila = 0; fila < dataGridView1.Rows.Count - 1; fila++)
                {


                    string valor = dataGridView1.Rows[fila].Cells["clave"].Value.ToString();
                   
                    string vQueryInsertarClaves = "[EEHInsert_Fact_Correlativo_Altos] 10,'{0}' "; // utilizar para unica 
                    vQueryInsertarClaves = string.Format(vQueryInsertarClaves, valor );
                    DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarClaves);

                }


  

            }

         
         }

        private void barButtonItem31_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Conexion vConexion = new Conexion();
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                //DE ESTA MANERA FILTRAMOS TODOS LOS ARCHIVOS EXCEL EN EL NAVEGADOR DE ARCHIVOS
                Filter = "Excel | *.xls;*.xlsx;",

                //AQUÍ INDICAMOS QUE NOMBRE TENDRÁ EL NAVEGADOR DE ARCHIVOS COMO TITULO
                Title = "Seleccionar Archivo"
            };
         

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                dataGridView1.DataSource = ImportarDatos(openFileDialog.FileName);
                string vQueryEliminarClaves = "[EEHInsert_Fact_Correlativo_Altos] 12"; // utilizar para unica 
                vQueryEliminarClaves = string.Format(vQueryEliminarClaves);
                DataTable vDatosInsert1 = vConexion.obtenerDataTable(vQueryEliminarClaves);

                for (int fila = 0; fila < dataGridView1.Rows.Count - 1; fila++)
                {


                    string valor = dataGridView1.Rows[fila].Cells["clave"].Value.ToString();
                    string Agrupacion = dataGridView1.Rows[fila].Cells["Agrupacion"].Value.ToString();
                  
                    string vQueryInsertarClaves = "[EEHInsert_Fact_Correlativo_Altos] 11,'{0}','{1}'"; // utilizar para unica 
                    vQueryInsertarClaves = string.Format(vQueryInsertarClaves, valor, Agrupacion);
                    DataTable vDatosInsert = vConexion.obtenerDataTable(vQueryInsertarClaves);

                }
 
            }
        }

        private void barButtonItem45_ItemClick_1(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
           

            
        }
   
        private void barButtonItem57_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();
            Boolean vExistePeriodo1 = false;
            String vClaves = "[EEHAviso_Masivo_General] 4";
            DataTable vClavesnuevo = vConexion.obtenerDataTable(vClaves);
            string vSector = string.Empty;
            if (vClavesnuevo.Rows.Count > 0)
            {
                //GENERA GOBIERNO
                {
                    string vPathnG = @"\\192.168.100.8\\Facturas\\Facturas\\GOBIERNO\\" + vPeriodo + "\\{0}";
                    vPathnG = string.Format(vPathnG, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                    if (!System.IO.Directory.Exists(vPathnG))
                        System.IO.Directory.CreateDirectory(vPathnG);
                    //FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                    //string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
                    String vClaves1 = "[EEHAviso_Gobierno_Generales] 5";
                    DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);
                    if (vClavesnuevo1.Rows.Count > 0)
                    {
                        for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
                        {
                            string prefijoG = "";
                            string clave = "";
                            string vNombreInstitucionG = "";
                            string VcodigoAgrupacion = "";
                            VcodigoAgrupacion = "[EEHAviso_Gobierno_Generales] 6," + vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                            DataTable vAgrupacion = vConexion.obtenerDataTable(VcodigoAgrupacion);
                            prefijoG = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                            clave = vAgrupacion.Rows[0]["Clave"].ToString();

                            string vQuer1 = "[EEH_Gobierno_Generales] 8" + vAgrupacion;
                            DataTable VNUMEROSUMAR = vConexion.obtenerDataTable(vQuer1);
                            int myNum = int.Parse(VNUMEROSUMAR.Rows[0][0].ToString());
                            int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo1);
                            int vContador1 = vContador + myNum + 1;
                            vNombreInstitucionG = vAgrupacion.Rows[0]["NomIns"].ToString();
                            vNombreInstitucionG = vNombreInstitucionG.Replace('/', ' ');
                            vNombreInstitucionG = vNombreInstitucionG.Replace('|', ' ');
                            vNombreInstitucionG = vNombreInstitucionG.Replace('"', ' ');
                            vNombreInstitucionG = vNombreInstitucionG.Replace('\'', ' ');
                            vNombreInstitucionG = vNombreInstitucionG.Replace(':', ' ');
                            string vPathDocumentoG = vPathnG + prefijoG + "_" + vNombreInstitucionG + ".pdf";
                            //AvisoGobierno agob = new AvisoGobierno();
                            try
                            {
                                GeneracionDiariaGobierno FacturaEspecial = new GeneracionDiariaGobierno();
                                FacturaEspecial.Parameters["Tipo"].Value = 4;
                                FacturaEspecial.Parameters["mes_facturacion"].Value = vPeriodo;
                                FacturaEspecial.Parameters["clave"].Value = prefijoG;
                                FacturaEspecial.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                                FacturaEspecial.CreateDocument();
                                FacturaEspecial.ExportToPdf(vPathDocumentoG);
                                FacturaEspecial.Dispose();
                                string vQueryFacturas = "[EEHAviso_Gob_Ciclo_Actual_D] " + 0 + "," + vPeriodo + "," + vAgrupacion.Rows[0]["codAgrupacion"].ToString() + "," + 4;
                                vQueryFacturas = String.Format(vQueryFacturas, prefijoG);
                                DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                                string vClavesFacturadas = string.Empty;
                                if (vDatosFacturas.Rows.Count > 0)
                                {
                                    for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                                    {
                                        vClavesFacturadas += vDatosFacturas.Rows[x]["m_clave_primaria"].ToString() + ",";
                                    }
                                }
                                vClavesFacturadas = vClavesFacturadas.Remove(vClavesFacturadas.Length - 1, 1);
                                string vQueryGuardarClaves = " [EEHAviso_Masivo_General]  18, '{0}', '{1}', '{2}'";
                                vQueryGuardarClaves = string.Format(vQueryGuardarClaves, vPeriodo, vDatosFacturas.Rows[0]["PREFIJO"].ToString(), vClavesFacturadas);
                                vConexion.obtenerDataTable(vQueryGuardarClaves);
                                String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 17," + vAgrupacion.Rows[0]["codAgrupacion"].ToString();
                                vConexion.obtenerDataTable(vQuerDetalleMasivo);
                            }
                            catch (Exception Ex)
                            {
                                Console.WriteLine(Ex.Message);
                                genericos.Log("FACTURACION GOBIERNO ", Ex.Message, "");
                            }
                        }
                    }
                }

            }

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void barButtonItem45_ItemClick_2(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            Conexion vConexion = new Conexion();
            string vPeriodo = generarMesFacturacionNew(0);
            Boolean vExistePeriodo1 = false;
            string vPathnG = @"\\192.168.100.8\\Facturas\\Facturas\\GOBIERNO\\" + vPeriodo + "\\{0}";
                vPathnG = string.Format(vPathnG, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                if (!System.IO.Directory.Exists(vPathnG))
                     System.IO.Directory.CreateDirectory(vPathnG);
                //FacturaCorrelativo facturaCorrelativo = new FacturaCorrelativo();
                //string periodoFacturacion = facturaCorrelativo.generarMesFacturacion(0);
                String vClaves1 = "[EEHAviso_Gobierno_Generales] 5";
                DataTable vClavesnuevo1 = vConexion.obtenerDataTable(vClaves1);
                 if (vClavesnuevo1.Rows.Count > 0)
                 {
                   for (int i = 0; i < vClavesnuevo1.Rows.Count; i++)
                   {
                    string prefijoG = "";
                    string clave = "";
                    string vNombreInstitucionG = "";
                    string VcodigoAgrupacion = "";
                           VcodigoAgrupacion = "[EEHAviso_Gobierno_Generales] 6," + vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                    DataTable vAgrupacion = vConexion.obtenerDataTable(VcodigoAgrupacion);
                              prefijoG = vClavesnuevo1.Rows[i]["codAgrupacion"].ToString();
                              clave = vAgrupacion.Rows[0]["Clave"].ToString();

                            string vQuer1 = "[EEH_Gobierno_Generales] 8" + vAgrupacion;
                            DataTable VNUMEROSUMAR = vConexion.obtenerDataTable(vQuer1);
                            int myNum = int.Parse(VNUMEROSUMAR.Rows[0][0].ToString());
                            int vContador = ObtenerCorrelativoN(vConexion, generarMesFacturacionNew(0), generarMesFacturacionNew(1), ref vExistePeriodo1);
                            int vContador1 = vContador + myNum + 1;
                            vNombreInstitucionG = vAgrupacion.Rows[0]["NomIns"].ToString();
                             vNombreInstitucionG = vNombreInstitucionG.Replace('/', ' ');
                             vNombreInstitucionG = vNombreInstitucionG.Replace('|', ' ');
                             vNombreInstitucionG = vNombreInstitucionG.Replace('"', ' ');
                             vNombreInstitucionG = vNombreInstitucionG.Replace('\'', ' ');
                             vNombreInstitucionG = vNombreInstitucionG.Replace(':', ' ');
                            string vPathDocumentoG = vPathnG + prefijoG + "_" + vNombreInstitucionG + ".pdf";
                            //AvisoGobierno agob = new AvisoGobierno();
                     try
                     {
                      GeneracionDiariaGobierno FacturaEspecial = new GeneracionDiariaGobierno();
                      FacturaEspecial.Parameters["Tipo"].Value = 4;
                      FacturaEspecial.Parameters["mes_facturacion"].Value = vPeriodo;
                      FacturaEspecial.Parameters["clave"].Value = prefijoG;
                      FacturaEspecial.Parameters["contador_factura"].Value = vContador; //enviar la siguiente
                      FacturaEspecial.CreateDocument();
                      FacturaEspecial.ExportToPdf(vPathDocumentoG);
                      FacturaEspecial.Dispose();
                      string vQueryFacturas = "[EEHAviso_Gob_Ciclo_Actual_D] " + 0 + "," + vPeriodo + "," + vAgrupacion.Rows[0]["codAgrupacion"].ToString() + "," + 4;
                      vQueryFacturas = String.Format(vQueryFacturas, prefijoG);
                      DataTable vDatosFacturas = vConexion.obtenerDataTable(vQueryFacturas);
                       string vClavesFacturadas = string.Empty;
                          if (vDatosFacturas.Rows.Count > 0)
                          {
                            for (int x = 0; x < vDatosFacturas.Rows.Count; x++)
                            {
                             vClavesFacturadas += vDatosFacturas.Rows[x]["m_clave_primaria"].ToString() + ",";
                            }
                          }
                          vClavesFacturadas = vClavesFacturadas.Remove(vClavesFacturadas.Length - 1, 1);
                          string vQueryGuardarClaves = " [EEHAviso_Masivo_General]  18, '{0}', '{1}', '{2}'";
                                 vQueryGuardarClaves = string.Format(vQueryGuardarClaves, vPeriodo, vDatosFacturas.Rows[0]["PREFIJO"].ToString(), vClavesFacturadas);
                                 vConexion.obtenerDataTable(vQueryGuardarClaves);
                          String vQuerDetalleMasivo = "[EEHAviso_Masivo_General] 17," + vAgrupacion.Rows[0]["codAgrupacion"].ToString();
                                 vConexion.obtenerDataTable(vQuerDetalleMasivo);
                          }
                          catch (Exception Ex)
                          {
                          Console.WriteLine(Ex.Message);
                          genericos.Log("FACTURACION GOBIERNO ", Ex.Message, "");
                     }
                   }
                 }
               }

        private void barButtonItem59_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            string vPeriodo = generarMesFacturacionNew(0);
            Conexion vConexion = new Conexion();




            string var = TxIrregularidad.Text.Trim();
            if (var != string.Empty)

                try

                {

                    string vQueryDetalle1 = "[EEHAviso_Masivo_General] 28" + "," + var;
                    DataTable vDatosDetalle1 = vConexion.obtenerDataTable(vQueryDetalle1);

                    if (vDatosDetalle1.Rows.Count > 0)
                        for (int i = 0; i < vDatosDetalle1.Rows.Count; i++)
                        {
                            string vClave = var;
                            string Nombre = vDatosDetalle1.Rows[i]["m_nombre_abonado"].ToString();
                            string Liquidacion = vDatosDetalle1.Rows[i]["id_liquidacion"].ToString();
                            string SectorEEH = vDatosDetalle1.Rows[i]["SECTOR_ID"].ToString();
                            string VSector = vDatosDetalle1.Rows[i]["SECTOR_EEH"].ToString();
                            string VOs = vDatosDetalle1.Rows[i]["Os"].ToString();

                            //   string vPath = @"\\192.168.100.8\\centralizada\\Irregularidad\\PRUEBAS" + vPeriodo + "\\" + VSector + "\\{0}";
                            string vPath = @"C:\facturas\Irregularidad\" + vPeriodo + "\\" + VSector + "\\{0}";
                            vPath = string.Format(vPath, DateTime.Now.Year + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00") + "\\");
                            if (!System.IO.Directory.Exists(vPath))
                                System.IO.Directory.CreateDirectory(vPath);

                            string vPathDocumentoGG = vPath + SectorEEH + "_" + Liquidacion + "_" + vClave + "_" + Nombre + ".pdf";
                            FacturasEEHIrregularidad FacturaIrregularidad = new FacturasEEHIrregularidad();
                            FacturaIrregularidad.Parameters["obtener_todos"].Value = 2;
                            FacturaIrregularidad.Parameters["clave_primaria"].Value = Liquidacion;
                            FacturaIrregularidad.CreateDocument();
                            FacturaIrregularidad.ExportToPdf(vPathDocumentoGG);
                            FacturaIrregularidad.Dispose();

                        }
                }
                catch (Exception ex)
                {

                    throw;
                }
        }

        private void barButtonItem60_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //Obtener Codigo Agrupacion Y arraglar generarMesFacturacion
            string vPeriodo = generarMesFacturacionNew(0);
            string var = TxMasivo.Text.Trim();
            if (var != string.Empty)
            {

                string vQuery = "[EEHAviso_Gobierno_Generales] 8," + var;
                Conexion vConexion = new Conexion();
                DataTable vDatosMesActual = vConexion.obtenerDataTable(vQuery);

                if (vDatosMesActual.Rows.Count > 0)
                {
                    for (int i = 0; i < vDatosMesActual.Rows.Count; i++)
                    {
                        List<AvisoGobierno> lstAvisoGobiernoDetalle = new List<AvisoGobierno>();
                        int clave = Convert.ToInt32(var);
                        string tipoFactura = "FAC_ESP_" + clave + "_" + vPeriodo;

                        string vPathMasivo = @"C:\\facturas\\Masiva\\";

                        if (!System.IO.Directory.Exists(vPathMasivo))
                            System.IO.Directory.CreateDirectory(vPathMasivo);

                        string prefijo = vDatosMesActual.Rows[i]["m_clave_primaria"].ToString();
                        string vNombreInstitucion = vDatosMesActual.Rows[i]["m_nombre_abonado"].ToString();
                        vNombreInstitucion = vNombreInstitucion.Replace('/', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('|', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('"', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace('\'', ' ');
                        vNombreInstitucion = vNombreInstitucion.Replace(':', ' ');
                        try
                        {
                            FacturaClienteMasivo FacturaEspecial = new FacturaClienteMasivo();

                            FacturaEspecial.Parameters["m_clave_primaria"].Value = clave;
                            FacturaEspecial.CreateDocument();
                            FacturaEspecial.ExportToPdf("C:\\facturas\\Masiva\\" + prefijo + "_" + "_" + vNombreInstitucion + "_" + "1" + ".pdf");
                            FacturaEspecial.Dispose();
                        }
                        catch (Exception Ex)
                        {
                            Console.WriteLine(Ex.Message);
                        }
                    }
                }


            }
        }
    }
}  




